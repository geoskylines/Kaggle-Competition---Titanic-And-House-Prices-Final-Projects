{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Intro to Machine Learning - Phat Tran.ipynb","version":"0.3.2","provenance":[{"file_id":"1CKUwBCIDEHRMvp7Q3OanwWm3jaabeWji","timestamp":1544142622833}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"kL3jL3gzO-ox","colab_type":"text"},"cell_type":"markdown","source":["# Introduction to Supervised Learning\n","\n","For the purpose of this course, we focus on 4 important tasks in supervised machine learning.  \n","In data preparation:\n","1. Dealing with the missing data,\n","2. Feature engineering,\n","\n","In analysis:\n","3. Picking the algorithm,\n","4. Fine tuning the algorithm.\n","\n","</br>\n","\n","**Dealing with the missing data** is part of Explanatory Data Analysis. Some of the algorithms in Python (and R) do not when there is missing data. There are different approaches to address missing data, which falls under the \"Statistics\" part of machine learning. For the purpose of this class, we can use mean imputation. \n","\n","<br/>\n","\n","<img src=\"https://cdn-images-1.medium.com/max/1600/1*_RA3mCS30Pr0vUxbp25Yxw.png\" width=\"75%\">\n","<br/>\n","source:[ How to handle missing data](https://towardsdatascience.com/how-to-handle-missing-data-8646b18db0d4)\n","\n","</br>\n","\n","\n","**Feature engineering** is an important part of machine learning and falls under the \"domain knowledge\" part of machine learning. In short, it means using our domain knowledge to create new features (predictors) for the algorithm to use while training our model. Feature engineering is a big reason why knowing advanced statistics and programming are not enough to be a good data scientist. \n","\n","<img src=\"https://m.media-amazon.com/images/S/aplus-media/vc/d03ff0db-5458-451d-917c-3dbccc1fc95e.png\" width=\"75%\">\n","<br/>\n","source: [Feature Engineering for Machine Learning](http://shop.oreilly.com/product/0636920049081.do)\n","\n","</br>\n","\n","In the following sections, we will do missing data imputations and feature engineering. We will also use different algorithms and fine tune them. While in-depth knowledge of these algorithms and hyperparameters for fine tuning are beyond the content of this class, we will learn the mechanics of implementing machine learning methods using  Python and scikit-learn. \n","\n","Our focus will be on **Classification**. Classification is useful when the dependent variable is qualitative (passed/failed the class). We will use four techniques to do classification: manual classification, decision trees, random forests, and logistic regression.\n","\n","While manual classification can be used for small size data sets, it is not practical for large data sets. The remaining three techniques are common supervised machine learning algorithms."]},{"metadata":{"id":"91RM_KuM268C","colab_type":"text"},"cell_type":"markdown","source":["# Setup\n","For the purpose of the machine learning hands-on part, we will use Kaggle and Google Colaboratory. These two tools/websites will help us apply what we learned in DataCamp in a more real-world environment. \n","\n","\n"]},{"metadata":{"id":"kAjwcsoM7mH7","colab_type":"text"},"cell_type":"markdown","source":["## Kaggle\n","Kaggle, which is owned by Google, is an online community of data scientist. The main attraction of Kaggle is the machine learning competitions it hosts. Some of these are for education for purposes, and others are for recruitment and prizes. \n","\n","Go to [kaggle.com](https://www.kaggle.com/) and register. You can use your binghamton email, personal email, or existing social/website accounts (Google, Yahoo, Facebook). Once created, your username cannot be changed. However, your display name can be changed anytime from your profile. \n","\n",">  Your username can be anything you prefer, but your display name must start with **amy-**. \n","\n","After amy- you can have anything you prefer as part of your username: for instance, amy-aybu. You can choose to have your name or username after amy- however, remember that the class project is a competition and if you have your name or binghamton username, your ranking will not be anonymous. \n","\n","As a reminder, the project grade will depend on your competition ranking. Since everyone in the class will have a display name starting with amy-,  after you submit your entry, you can see where you stand in the class by searching amy-. If everyone chooses a random display name after amy-, we can keep the standing confidential. Keeping the ranking confidential is not essential, however, what is more important is knowing where you stand in the ranking compared to the class during the project submission since it will indicate whether you need to put more effort.\n","\n","The way Kaggle competitions work is you train a model with the given `train` dataset and make predictions using the given `test` dataset, and your submission score is based  on the \"accuracy\" of your predictions. The metric to measure depends on the competition.\n","\n","\n","### Titanic Competition\n","Find the [Titanic](https://www.kaggle.com/c/titanic) competition. Read the description (*Overview* tab) and look at the variables in the dataset (*Data* tab). The *Leaderboard* tab shows the current ranking in the world. Once you prepare your submission, you can submit it from the *Submit Prediction* tab. Remember that you can only submit max of **10 submissions** every 24 hours. The *Kernels* tab is where you can find  other collaborators scripts and notebooks written in various languages. You can check out highly voted kernels and get ideas on how to approach to this or other competitions.\n","\n","The goal of the competition is to train a model that would predict if a passenger survived the sinking of the Titanic or not. \n","\n"]},{"metadata":{"id":"BZDhCHeL7rUi","colab_type":"text"},"cell_type":"markdown","source":["## Google Colaboratory\n","Colab is based on Jupyter notebook for those who are using it for Python projects. It is very similar, but the biggest advantage is the Colab files are hosted as Google Drive files and can be shared as easily. There is no need for any installation of either Python or  Colab.\n","\n","For those who are not familiar with Jupyter, there are two types of cells in the Colab notebook: code and text. Text cell is for text purposes, where you explain your code. Code cell is for your code. This notebook is using Python 3 so the runtime type of the code cell is Python 3.  The only other runtime option is Python 2, unlike Jupyter, which has R and Julia as well.\n","\n","Best way to use this notebook on class content is to run the codes as you read the notebook. To run the code, you can click on the \"Open in Playground\" button on the left corner and this will make the notebook editable. When you run the code for the first time, it will give you a warning - **uncheck the \"reset all runtimes before running\"** and then click \"run anyway\" (you may need to sign in to your Google account).  You can also change the code as you see fit. At the end of certain sections, running the code will pop a file download box. These are the files you can submit to Kaggle - so save them to your computer.\n","\n","If you run into a problem with launching the playground, then you can make a copy of this notebook (from File menu). Any change you make in playground or on your copy will only affect you not the original notebook. If you change something and cannot go back to the original, delete your current copy and make another one from this original notebook.\n","\n","When your Colab notebook is inactive for a long time, your session automatically ends. You can always re-connect to the hosted runtime, but you need to re-run all your code. Once the session is terminated, libraries, variables, etc. are resetted (gone!) since every new session connects to a new virtual machine."]},{"metadata":{"id":"GpE1sBqKPBqV","colab_type":"text"},"cell_type":"markdown","source":["# Manual Classification\n","The goal of manual classification is to group passengers in a way that we can predict whether a passenger is survived by looking at his/her group membership.\n","\n","In the Manual Classification, we will not use any of the machine learning algorithms, but rather use `pandas` to do some explanatory data analysis and try to guess which passengers are likely to survive. "]},{"metadata":{"id":"JVLbl9ME2b_D","colab_type":"code","colab":{}},"cell_type":"code","source":["# load the necessary libraries\n","\n","# pandas\n","import pandas as pd\n","from pandas import Series,DataFrame\n","\n","# visualization\n","import seaborn as sns\n","\n","# to download files from Colab to our computer\n","from google.colab import files"],"execution_count":0,"outputs":[]},{"metadata":{"id":"OLraL0OijNh6","colab_type":"text"},"cell_type":"markdown","source":["Titanic competition provides two files: train and test. They are in my S3 bucket and we can create data frames directly from the bucket addresses rather than dealing with Google Drive.\n","\n","In real life scenarios, you will not have separate test and train datasets. You will have one big dataset that you need to use to create your model. In this situation, you can built-in mechanisms to split the data into test and train, with a ratio of your own choice (e.g., 80-20%). Test dataset helps you to validate your model and prevent potential overfitting. \n","\n","Since this is a competition, the test dataset is at Kaggle and when we submit our model predictions, we will see how well our model predicts."]},{"metadata":{"id":"IOXIVhoBizMQ","colab_type":"code","colab":{}},"cell_type":"code","source":["# get train & test csv files as a DataFrame\n","train_df = pd.read_csv(\"https://s3.amazonaws.com/it4ba/R/train.csv\")\n","test_df    = pd.read_csv(\"https://s3.amazonaws.com/it4ba/R/test.csv\")\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ww5tqNufkUu0","colab_type":"code","outputId":"ed7325ea-fa36-4f12-97bc-16d75748109a","executionInfo":{"status":"ok","timestamp":1544826818942,"user_tz":300,"elapsed":407,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":197}},"cell_type":"code","source":["# preview the data\n","train_df.head()"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  "]},"metadata":{"tags":[]},"execution_count":30}]},{"metadata":{"id":"Gk_2SfyN37TM","colab_type":"text"},"cell_type":"markdown","source":["We can also look at the types of variables both in the **train** data and the **test** data"]},{"metadata":{"id":"YCf-n2KM4R9s","colab_type":"code","outputId":"77f1f829-17dc-4b3c-8a75-141539771e39","executionInfo":{"status":"ok","timestamp":1544826820633,"user_tz":300,"elapsed":536,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":656}},"cell_type":"code","source":["print(\"train data variables\")\n","train_df.info()\n","print(\"  \")\n","print(\"test data variables\")\n","test_df.info()\n","\n"],"execution_count":31,"outputs":[{"output_type":"stream","text":["train data variables\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n","PassengerId    891 non-null int64\n","Survived       891 non-null int64\n","Pclass         891 non-null int64\n","Name           891 non-null object\n","Sex            891 non-null object\n","Age            714 non-null float64\n","SibSp          891 non-null int64\n","Parch          891 non-null int64\n","Ticket         891 non-null object\n","Fare           891 non-null float64\n","Cabin          204 non-null object\n","Embarked       889 non-null object\n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.6+ KB\n","  \n","test data variables\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 418 entries, 0 to 417\n","Data columns (total 11 columns):\n","PassengerId    418 non-null int64\n","Pclass         418 non-null int64\n","Name           418 non-null object\n","Sex            418 non-null object\n","Age            332 non-null float64\n","SibSp          418 non-null int64\n","Parch          418 non-null int64\n","Ticket         418 non-null object\n","Fare           417 non-null float64\n","Cabin          91 non-null object\n","Embarked       418 non-null object\n","dtypes: float64(2), int64(4), object(5)\n","memory usage: 36.0+ KB\n"],"name":"stdout"}]},{"metadata":{"id":"-PqnEq60nnH6","colab_type":"text"},"cell_type":"markdown","source":["As discussed, dealing with missing data is an important step. First, we check if there are any missing values."]},{"metadata":{"id":"eYRZw3JQnnXd","colab_type":"code","outputId":"fb118ae7-2453-4f53-d45f-ac93b501dedc","executionInfo":{"status":"ok","timestamp":1544826824068,"user_tz":300,"elapsed":330,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":247}},"cell_type":"code","source":["# checking missing variables in train dataset\n","train_df.isna().sum()"],"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age            177\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         2\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":32}]},{"metadata":{"id":"5xnNx_sH15A-","colab_type":"code","outputId":"c1d49a6f-010b-46ba-ea78-beea2facc91b","executionInfo":{"status":"ok","timestamp":1544826825150,"user_tz":300,"elapsed":430,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":230}},"cell_type":"code","source":["# checking missing variables in the test dataset\n","test_df.isna().sum()"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId      0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age             86\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             1\n","Cabin          327\n","Embarked         0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":33}]},{"metadata":{"id":"0R-5CWUKpQ3o","colab_type":"text"},"cell_type":"markdown","source":["Age, Cabin, and Embarked variables have missing data. We will deal with Age and Embarked in the following sections. Cabin is hopeless at this point - about 80% is missing. "]},{"metadata":{"id":"GmQ6jjVep_WQ","colab_type":"text"},"cell_type":"markdown","source":["At this point, we have to pick a variable as the starting point. It seems like other than ticket number variable and missing cabin variable, almost all can determine whether a passenger survives. Even the name variable has importance since name includes titles of the passengers. For instance, Major (over Mr.) title is a military title and can mean the person has some experience with \"disasters.\" Lady (over Mrs.) title signifies royalty and can mean certain privileges. This would be an example of a feature engineering.\n","\n","For now, we will start with more straightforward assumptions."]},{"metadata":{"id":"l_aHn2jHP5dw","colab_type":"text"},"cell_type":"markdown","source":["## Does Gender Matter?"]},{"metadata":{"id":"xSh2slyq7zrM","colab_type":"code","outputId":"0c0774ce-91c0-49d4-97c2-175eb56c8bdc","executionInfo":{"status":"ok","timestamp":1544826826501,"user_tz":300,"elapsed":395,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":137}},"cell_type":"code","source":["# check male/female distribution\n","pd.crosstab(train_df.Sex, columns=\"count\")"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>col_0</th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>Sex</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>female</th>\n","      <td>314</td>\n","    </tr>\n","    <tr>\n","      <th>male</th>\n","      <td>577</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["col_0   count\n","Sex          \n","female    314\n","male      577"]},"metadata":{"tags":[]},"execution_count":34}]},{"metadata":{"id":"aFb12alX9gN_","colab_type":"code","outputId":"6728b646-bf77-4f3f-c80e-6396f5aa27b2","executionInfo":{"status":"ok","timestamp":1544826827979,"user_tz":300,"elapsed":365,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":137}},"cell_type":"code","source":["# check if there is a difference in survival rate of male vs. female\n","pd.crosstab(train_df.Survived, train_df.Sex)\n"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>Sex</th>\n","      <th>female</th>\n","      <th>male</th>\n","    </tr>\n","    <tr>\n","      <th>Survived</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>81</td>\n","      <td>468</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>233</td>\n","      <td>109</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["Sex       female  male\n","Survived              \n","0             81   468\n","1            233   109"]},"metadata":{"tags":[]},"execution_count":35}]},{"metadata":{"colab_type":"code","id":"JO5AVmNu-jiV","outputId":"9a16a544-66f0-4a99-f082-d95789289c85","executionInfo":{"status":"ok","timestamp":1544826828758,"user_tz":300,"elapsed":393,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":137}},"cell_type":"code","source":["# survival x gender rate using percentages\n","pd.crosstab(train_df.Sex, train_df.Survived, normalize = \"index\")\n"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>Survived</th>\n","      <th>0</th>\n","      <th>1</th>\n","    </tr>\n","    <tr>\n","      <th>Sex</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>female</th>\n","      <td>0.257962</td>\n","      <td>0.742038</td>\n","    </tr>\n","    <tr>\n","      <th>male</th>\n","      <td>0.811092</td>\n","      <td>0.188908</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["Survived         0         1\n","Sex                         \n","female    0.257962  0.742038\n","male      0.811092  0.188908"]},"metadata":{"tags":[]},"execution_count":36}]},{"metadata":{"id":"cexm-nTgsVhA","colab_type":"text"},"cell_type":"markdown","source":["Seems like 74% of females survived and 81% of males didn't survive. I guess we all knew that much.\n","<br/>\n","<img src=\"https://static.businessinsider.com/image/5994b6dd46a54c00254ff491-750.jpg\" width=\"33%\">"]},{"metadata":{"id":"sPgBTTTaO9p_","colab_type":"text"},"cell_type":"markdown","source":["**Submission 1**"]},{"metadata":{"id":"nqF5XFG9uo4d","colab_type":"text"},"cell_type":"markdown","source":["Since the female survival rate is pretty high, we can have a model that predicts that females survive, and males do not. "]},{"metadata":{"id":"kbIrxPV4yR3j","colab_type":"code","colab":{}},"cell_type":"code","source":["\n","\n","# create the submission file using the test_df\n","# assign 1 to females for Survived variable and 0 for males\n","submission = pd.DataFrame({\n","        \"PassengerId\": test_df[\"PassengerId\"],\n","        \"Survived\": [1 if x == 'female' else 0 for x in test_df['Sex']]\n","    })\n","\n","# convert the dataframe to csv file\n","submission.to_csv('titanic-mc1.csv', index=False)\n","\n","# download the submission file to our computer\n","files.download('titanic-mc1.csv')\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"XBskP_aJ0A9j","colab_type":"text"},"cell_type":"markdown","source":["We have our first prediction file. Go to Kaggle and Titanic competition and submit your prediction. "]},{"metadata":{"id":"5lSfXm4DzVph","colab_type":"text"},"cell_type":"markdown","source":["\n","---\n","\n","\n","**`Kaggle Score: 0.76555`**\n","\n","\n","---"]},{"metadata":{"id":"ECxrkdtTPT_t","colab_type":"text"},"cell_type":"markdown","source":["## Does Age Matter?\n","\n","Let's look at the age variable."]},{"metadata":{"id":"FA7SBD45Pyl7","colab_type":"code","outputId":"72e7a9fe-70c4-4ea4-8ef0-226db021b71e","executionInfo":{"status":"ok","timestamp":1544826833287,"user_tz":300,"elapsed":365,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":176}},"cell_type":"code","source":["# summary of Age\n","train_df['Age'].describe()"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    714.000000\n","mean      29.699118\n","std       14.526497\n","min        0.420000\n","25%       20.125000\n","50%       28.000000\n","75%       38.000000\n","max       80.000000\n","Name: Age, dtype: float64"]},"metadata":{"tags":[]},"execution_count":38}]},{"metadata":{"id":"RN53CHqlT606","colab_type":"code","outputId":"d46aefdd-421f-437a-9397-f4ad3232f076","executionInfo":{"status":"ok","timestamp":1544826835587,"user_tz":300,"elapsed":496,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":364}},"cell_type":"code","source":["# Age Histogram\n","train_df['Age'].plot.hist()"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd2097d6a90>"]},"metadata":{"tags":[]},"execution_count":39},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAfIAAAFKCAYAAADmCN3IAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAHR1JREFUeJzt3XtwVOX9x/FPzCaGQJgkuEFhRCiG\nSwnXIkNULERBkoqVSxCZQFFUaAiggCGhKPlJx3CrIkIHAaFjAKWsjg1TaxhLYRwnrAodJCoT0bYT\nI5cNBIgJARLO7w/GrVRIFtyzu8/m/ZpxxnN29znfL7ubz57n7J4TYVmWJQAAYKQbgl0AAAC4fgQ5\nAAAGI8gBADAYQQ4AgMEIcgAADEaQAwBgMEewC7geHk+NX8ZJSIhVdXWdX8YKNnoJTfQSmuglNNHL\n1TmdcVe9rUXvkTsckcEuwW/oJTTRS2iil9BEL9enRQc5AACmI8gBADAYQQ4AgMEIcgAADEaQAwBg\nMIIcAACDEeQAABiMIAcAwGAEOQAABiPIAQAwGEEOAIDBCHIAAAxm69XPysvLlZ2drSlTpigrK0uz\nZs1SdXW1JOnUqVPq16+fpk2bplGjRiklJUWSlJCQoFWrVtlZFmzy2JJdwS6hSRvz0oJdAgD4nW1B\nXldXp8WLFys1NdW77ocBnZ+fr8zMTElSly5dVFRUZFcpAACELdum1qOjo7V+/XolJSX96Lavv/5a\nNTU16tOnj12bBwCgRbBtj9zhcMjhuPLwr7/+urKysrzLVVVVmjVrlo4fP66JEyfqwQcfbHLshIRY\nv13rtamLtZsmnHqxQ7D+fcLpeaGX0EQvoSlQvdh6jPxKzp8/r3379qmgoECSFB8fr9mzZ+vBBx9U\nTU2NMjMzNXjw4CvuyX+vurrOL7U4nXHyeGr8MlawhVMvdgnGv084PS/0EproJTT5u5emPhQE/Fvr\nH3/88WVT6m3atNHYsWMVFRWlxMREpaSk6Ouvvw50WQAAGCngQX7w4EH16NHDu7x3714VFhZKuvQF\nuUOHDqlLly6BLgsAACPZNrVeVlampUuXqrKyUg6HQyUlJXrllVfk8XjUqVMn7/0GDhyod955Rw8/\n/LAaGxv15JNPqn379naVBQBAWLEtyFNSUq74k7Jnn3328gIcDi1ZssSuMgAACGuc2Q0AAIMR5AAA\nGIwgBwDAYAQ5AAAGC/gJYYBgCfWLukhc2AXAtWOPHAAAgxHkAAAYjCAHAMBgBDkAAAYjyAEAMBhB\nDgCAwQhyAAAMRpADAGAwghwAAIMR5AAAGIwgBwDAYAQ5AAAGI8gBADAYQQ4AgMEIcgAADEaQAwBg\nMIIcAACDEeQAABiMIAcAwGAEOQAABiPIAQAwGEEOAIDBCHIAAAxGkAMAYDCCHAAAgxHkAAAYzNYg\nLy8v13333afNmzdLkvLy8jRq1ChNmjRJkyZN0u7duyVJxcXFGjt2rDIzM7V9+3Y7SwIAIKw47Bq4\nrq5OixcvVmpq6mXr58yZo2HDhl12vzVr1sjlcikqKkrjxo3T8OHDFR8fb1dpAACEDdv2yKOjo7V+\n/XolJSU1eb8DBw6od+/eiouLU0xMjAYMGKD9+/fbVRYAAGHFtj1yh8Mhh+PHw2/evFmbNm1Su3bt\n9Oyzz6qqqkqJiYne2xMTE+XxeJocOyEhVg5HpF/qdDrj/DJOKAinXlqqUH8OQ72+a0EvoYlerp1t\nQX4lv/71rxUfH6+ePXtq3bp1Wr16tfr373/ZfSzLanac6uo6v9TjdMbJ46nxy1jBFk69tGSh/ByG\n02uMXkITvTQ93tUE9Fvrqamp6tmzpyQpLS1N5eXlSkpKUlVVlfc+x48fb3Y6HgAAXBLQIJ85c6Yq\nKiokSW63W8nJyerbt68OHjyoM2fOqLa2Vvv379fAgQMDWRYAAMaybWq9rKxMS5cuVWVlpRwOh0pK\nSpSVlaWnnnpKrVq1UmxsrAoLCxUTE6O5c+dq6tSpioiI0IwZMxQXFz7HSAAAsJNtQZ6SkqKioqIf\nrb///vt/tG7kyJEaOXKkXaUAABC2OLMbAAAGI8gBADAYQQ4AgMEIcgAADEaQAwBgMIIcAACDEeQA\nABiMIAcAwGAEOQAABiPIAQAwGEEOAIDBCHIAAAxGkAMAYDCCHAAAgxHkAAAYjCAHAMBgBDkAAAYj\nyAEAMBhBDgCAwQhyAAAMRpADAGAwghwAAIMR5AAAGIwgBwDAYAQ5AAAGI8gBADAYQQ4AgMEIcgAA\nDEaQAwBgMIIcAACDEeQAABjMYefg5eXlys7O1pQpU5SVlaUjR44oPz9fDQ0NcjgcWr58uZxOp3r1\n6qUBAwZ4H/enP/1JkZGRdpYGAEBYsC3I6+rqtHjxYqWmpnrXrVy5UuPHj1dGRoa2bNmiTZs2KTc3\nV23atFFRUZFdpQAAELZsm1qPjo7W+vXrlZSU5F23aNEi3X///ZKkhIQEnTp1yq7NAwDQItgW5A6H\nQzExMZeti42NVWRkpBobG7V161aNGjVKknT+/HnNnTtXEyZM0KZNm+wqCQCAsGPrMfIraWxsVG5u\nrgYPHuydds/NzdWDDz6oiIgIZWVlaeDAgerdu/dVx0hIiJXD4Z9j6E5nnF/GCQXh1EtLFerPYajX\ndy3oJTTRy7ULeJDn5+frtttuU05OjnfdI4884v3/wYMHq7y8vMkgr66u80stTmecPJ4av4wVbOHU\nS0sWys9hOL3G6CU00UvT411NQH9+VlxcrKioKM2aNcu77uuvv9bcuXNlWZYaGhq0f/9+JScnB7Is\nAACMZdseeVlZmZYuXarKyko5HA6VlJToxIkTuvHGGzVp0iRJUteuXVVQUKCbb75Z48aN0w033KC0\ntDT16dPHrrIAAAgrtgV5SkqKzz8pe+aZZ+wqAwCAsMaZ3QAAMBhBDgCAwQhyAAAMRpADAGAwghwA\nAIMR5AAAGCzgZ3YDcHWPLdkV7BKatDEvLdglAPgf7JEDAGAwghwAAIMR5AAAGIwgBwDAYAQ5AAAG\nI8gBADAYQQ4AgMEIcgAADEaQAwBgMIIcAACDEeQAABiMIAcAwGAEOQAABiPIAQAwGEEOAIDBfApy\ny7LsrgMAAFwHn4J82LBheumll1RRUWF3PQAA4Br4FOTbt2+X0+nUggUL9Oijj2rHjh06f/683bUB\nAIBm+BTkTqdTWVlZKioqUkFBgd544w0NGTJEL730ks6dO2d3jQAA4Cp8/rLbxx9/rPz8fD3xxBMa\nMGCAtm7dqrZt22r27Nl21gcAAJrg8OVOw4cPV8eOHTV+/Hg9//zzioqKkiR17dpV77//vq0FAgCA\nq/MpyDds2CDLstS5c2dJ0ueff66f//znkqStW7faVhwAAGiaT1Prb7/9tl599VXv8rp167RixQpJ\nUkREhD2VAQCAZvkU5G63W4WFhd7llStXat++fbYVBQAAfONTkF+4cOGyn5vV1taqoaGh2ceVl5fr\nvvvu0+bNmyVJR44c0aRJkzRx4kTNnj3bO2ZxcbHGjh2rzMxMbd++/Xr6AACgRfLpGPmECROUkZGh\nlJQUXbx4UQcPHlROTk6Tj6mrq9PixYuVmprqXbdq1SpNnDhR6enpevHFF+VyufTQQw9pzZo1crlc\nioqK0rhx4zR8+HDFx8f/tM4AAGgBfNojz8zM1Ouvv6709HQ98MAD2rp1q8aOHdvkY6Kjo7V+/Xol\nJSV517ndbt17772SLp0trrS0VAcOHFDv3r0VFxenmJgYDRgwQPv37/8JLQEA0HL4tEd+7tw5ff75\n5/ruu+9kWZY+/PBDSdK4ceOuPrDDIYfj8uHPnj2r6OhoSVK7du3k8XhUVVWlxMRE730SExPl8Xiu\nuREAAFoin4J86tSpuuGGG9SxY8fL1jcV5M252oVYfLlAS0JCrByOyOve9g85nXF+GScUhFMvCE3h\n9Bqjl9BEL9fOpyBvaGjQm2+++ZM3Fhsbq/r6esXExOjYsWNKSkpSUlKSqqqqvPc5fvy4+vXr1+Q4\n1dV1P7kW6dI/ssdT45exgi2cekHoCpfXWDi9X+glNPm7l6Y+FPh0jPz2229XdXX1Ty7kzjvvVElJ\niSRp586dGjJkiPr27auDBw/qzJkzqq2t1f79+zVw4MCfvC0AAFoCn/bIjx49qhEjRqhr166KjPzv\nlPaWLVuu+piysjItXbpUlZWVcjgcKikp0YoVK5SXl6dt27apQ4cOeuihhxQVFaW5c+dq6tSpioiI\n0IwZMxQXFz5TKwAA2MmnIH/yySeveeCUlBQVFRX9aP2mTZt+tG7kyJEaOXLkNW8DAICWzqep9UGD\nBqmurk7l5eUaNGiQbr75Zt1xxx121wYAAJrhU5AvX75cLpdLb7/9tiRpx44d+v3vf29rYQAAoHk+\nBfnHH3+s1atXq3Xr1pKkGTNm6LPPPrO1MAAA0DyfgvzGG2+U9N8rnTU2NqqxsdG+qgAAgE98+rLb\ngAEDlJ+fr+PHj2vTpk3auXOnBg0aZHdtAACgGT4F+dNPP6333ntPMTExOnr0qB599FGNGDHC7toA\nAEAzfAryiooK9erVS7169bps3a233mpbYQAAoHk+BflvfvMb7/Hx8+fP6+TJk0pOTtY777xja3EA\nAKBpPgX5rl27Llv+8ssv5XK5bCkIAAD4zqdvrf+v5ORkfn4GAEAI8GmP/OWXX75s+ejRozpz5owt\nBQEAAN/5tEceGRl52X/du3fX+vXr7a4NAAA0w6c98uzs7Cuuv3jxoiTphhuua4YeAAD8RD4FeZ8+\nfa54JjfLshQREaEvvvjC74UBAIDm+RTkM2bM0O2336677rpLERER+sc//qF///vfV91TBwAAgeHT\nnPjevXs1fPhwxcbGqlWrVsrIyJDb7ba7NgAA0AyfgvzUqVPas2ePamtrVVtbqz179ujkyZN21wYA\nAJrh09T64sWLtWTJEj399NOSpG7dumnRokW2FgYAAJrn85fdtm7d6v1yGwAACA0+Ta0fOnRIY8aM\nUXp6uiTpj3/8ow4cOGBrYQAAoHk+Bfnzzz+vF154QU6nU5KUnp6uwsJCWwsDAADN8ynIHQ6HevTo\n4V3u0qWLHA6fZuUBAICNfA7yiooK7/HxPXv2yLIsWwsDAADN82m3ev78+crOzta//vUv/eIXv1DH\njh21bNkyu2sDAADN8CnIExIStGPHDp08eVLR0dFq06aN3XUBAAAf+DS1Pm/ePElSYmIiIQ4AQAjx\naY+8c+fOys3NVf/+/RUVFeVdP27cONsKAwAAzWsyyA8dOqQePXrowoULioyM1J49e5SQkOC9nSAH\nACC4mgzyF154Qa+//rr3N+OTJ0/W2rVrA1IYAABoXpPHyPmJGQAAoa3JIP/f86oT7AAAhBafvrX+\nPS6YAgBAaGnyGPk///lPDR061Lt84sQJDR061HsVtN27d1/TxrZv367i4mLvcllZmVJSUlRXV6fY\n2FhJl04+k5KSck3jAgDQUjUZ5O+9955fN5aZmanMzExJ0kcffaS//e1vOnz4sAoLC9WtWze/bgsA\ngJagySDv2LGjbRtes2aNVqxYoTlz5ti2DQAAwl1QLmH26aef6pZbbvFeFnXVqlWqrq5W165dtWDB\nAsXExDT5+ISEWDkckX6pxemM88s4oSCcekFoCqfXGL2EJnq5dkEJcpfLpdGjR0u69Nv07t27q1On\nTlq0aJG2bNmiqVOnNvn46uo6v9ThdMbJ46nxy1jBFk69IHSFy2ssnN4v9BKa/N1LUx8Krulb6/7i\ndrvVv39/SdLw4cPVqVMnSVJaWprKy8uDURIAAEYKeJAfO3ZMrVu3VnR0tCzL0pQpU3TmzBlJlwI+\nOTk50CUBAGCsgE+tezweJSYmSrr0u/Tx48drypQpatWqldq3b6+ZM2cGuiQAAIwV8CBPSUnRhg0b\nvMsZGRnKyMgIdBkAAISFoBwjBwAA/kGQAwBgsKD8/AyAmR5bsivYJTRrY15asEsAAoo9cgAADEaQ\nAwBgMIIcAACDEeQAABiMIAcAwGAEOQAABiPIAQAwGEEOAIDBCHIAAAxGkAMAYDCCHAAAgxHkAAAY\njCAHAMBgBDkAAAYjyAEAMBhBDgCAwQhyAAAMRpADAGAwghwAAIMR5AAAGIwgBwDAYAQ5AAAGI8gB\nADAYQQ4AgMEIcgAADOYIdgGh4LElu4JdQrM25qUFuwQAQAhijxwAAIMR5AAAGCygU+tut1uzZ89W\ncnKyJKlbt256/PHHlZubq8bGRjmdTi1fvlzR0dGBLAsAAGMF/Bj5oEGDtGrVKu9yfn6+Jk6cqPT0\ndL344otyuVyaOHFioMsCAMBIQZ9ad7vduvfeeyVJw4YNU2lpaZArAgDAHAHfIz98+LCmT5+u06dP\nKycnR2fPnvVOpbdr104ej6fZMRISYuVwRPqlHqczzi/j2M2XOk3pBbCTr++DcHq/0EtoClQvAQ3y\nzp07KycnR+np6aqoqNDkyZPV2Njovd2yLJ/Gqa6u80s9TmecPJ4av4xlt+bqNKkXwE6+vA/C6f1C\nL6HJ37009aEgoFPr7du3V0ZGhiIiItSpUyfddNNNOn36tOrr6yVJx44dU1JSUiBLAgDAaAEN8uLi\nYr322muSJI/HoxMnTmjMmDEqKSmRJO3cuVNDhgwJZEkAABgtoFPraWlpmjdvnv7+97/rwoULKigo\nUM+ePTV//nxt27ZNHTp00EMPPRTIkgAAMFpAg7xNmzZau3btj9Zv2rQpkGUAABA2gv7zMwAAcP24\naIohTLiwCwAg8AhyAGEl1D/0ciVD+BtT6wAAGIwgBwDAYAQ5AAAGI8gBADAYQQ4AgMEIcgAADEaQ\nAwBgMIIcAACDEeQAABiMIAcAwGAEOQAABiPIAQAwGEEOAIDBCHIAAAxGkAMAYDCCHAAAgxHkAAAY\njCAHAMBgBDkAAAYjyAEAMBhBDgCAwQhyAAAMRpADAGAwghwAAIMR5AAAGIwgBwDAYAQ5AAAGI8gB\nADCYI9AbXLZsmfbt26eGhgZNmzZNu3bt0meffab4+HhJ0tSpUzV06NBAlwUAgJECGuR79+7Vl19+\nqW3btqm6ulqjR4/W4MGDNWfOHA0bNiyQpQAAEBYCGuR33HGH+vTpI0lq27atzp49q8bGxkCWAABA\nWAnoMfLIyEjFxsZKklwul+655x5FRkZq8+bNmjx5sp5++mmdPHkykCUBAGC0gB8jl6T3339fLpdL\nGzduVFlZmeLj49WzZ0+tW7dOq1ev1nPPPdfk4xMSYuVwRPqlFqczzi/jAIAv7PibE05/x+jl2gU8\nyD/44AOtXbtWGzZsUFxcnFJTU723paWlqaCgoNkxqqvr/FKL0xknj6fGL2MBgC9Gzf1LsEto1sa8\ntKBsN5z+Jvu7l6Y+FAR0ar2mpkbLli3Tq6++6v2W+syZM1VRUSFJcrvdSk5ODmRJAAAYLaB75O++\n+66qq6v11FNPedeNGTNGTz31lFq1aqXY2FgVFhYGsiQAAIwW0CB/+OGH9fDDD/9o/ejRowNZBgAA\nYYMzuwEAYDCCHAAAgxHkAAAYjCAHAMBgBDkAAAYjyAEAMBhBDgCAwQhyAAAMRpADAGAwghwAAIMR\n5AAAGIwgBwDAYAQ5AAAGI8gBADAYQQ4AgMEIcgAADEaQAwBgMIIcAACDEeQAABiMIAcAwGCOYBcA\nAAgtjy3ZFewSmrUxLy3YJYQM9sgBADAYQQ4AgMEIcgAADEaQAwBgMIIcAACDEeQAABiMIAcAwGAE\nOQAABiPIAQAwGEEOAIDBQuYUrS+88IIOHDigiIgILViwQH369Al2SQAAhLyQCPKPPvpI//nPf7Rt\n2zZ99dVXWrBggbZt2xbssgAAISrUzwe/4w+/Dti2QmJqvbS0VPfdd58kqWvXrjp9+rS+++67IFcF\nAEDoC4kgr6qqUkJCgnc5MTFRHo8niBUBAGCGkJha/1+WZTV5u9MZ57dtOZ1xAZ0CAQC0DP7MqqaE\nxB55UlKSqqqqvMvHjx+X0+kMYkUAAJghJIL8rrvuUklJiSTps88+U1JSktq0aRPkqgAACH0hMbU+\nYMAA9erVSxMmTFBERIQWLVoU7JIAADBChNXcAWkAABCyQmJqHQAAXB+CHAAAg4XEMfJgMP2UsOXl\n5crOztaUKVOUlZWlI0eOKDc3V42NjXI6nVq+fLmio6ODXaZPli1bpn379qmhoUHTpk1T7969jezl\n7NmzysvL04kTJ3Tu3DllZ2erR48eRvbyvfr6ej3wwAPKzs5Wamqqkb243W7Nnj1bycnJkqRu3brp\n8ccfN7IXSSouLtaGDRvkcDg0a9Ysde/e3chetm/fruLiYu9yWVmZ3njjDRUUFEiSunfvrv/7v/8L\nUnXXpra2VvPnz9fp06d14cIFzZgxQ06nM3C9WC2Q2+22nnzyScuyLOvw4cPW+PHjg1zRtamtrbWy\nsrKshQsXWkVFRZZlWVZeXp717rvvWpZlWX/4wx+sLVu2BLNEn5WWllqPP/64ZVmWdfLkSeuXv/yl\nsb389a9/tdatW2dZlmV988031ogRI4zt5XsvvviiNWbMGOutt94ytpe9e/daM2fOvGydqb2cPHnS\nGjFihFVTU2MdO3bMWrhwobG9/JDb7bYKCgqsrKws68CBA5ZlWdacOXOs3bt3B7ky3xQVFVkrVqyw\nLMuyjh49at1///0B7aVFTq2bfkrY6OhorV+/XklJSd51brdb9957ryRp2LBhKi0tDVZ51+SOO+7Q\nyy+/LElq27atzp49a2wvGRkZeuKJJyRJR44cUfv27Y3tRZK++uorHT58WEOHDpVk7mvsSkztpbS0\nVKmpqWrTpo2SkpK0ePFiY3v5oTVr1uiJJ55QZWWld3bUpF4SEhJ06tQpSdKZM2cUHx8f0F5aZJCb\nfkpYh8OhmJiYy9adPXvWO53Wrl07Y/qJjIxUbGysJMnlcumee+4xtpfvTZgwQfPmzdOCBQuM7mXp\n0qXKy8vzLpvcy+HDhzV9+nQ98sgj+vDDD43t5ZtvvlF9fb2mT5+uiRMnqrS01Nhevvfpp5/qlltu\nUWRkpNq2betdb1Ivv/rVr/Ttt99q+PDhysrKUm5ubkB7abHHyH/ICrNf4JnYz/vvvy+Xy6WNGzdq\nxIgR3vUm9vLmm2/qiy++0DPPPHNZ/Sb18s4776hfv3669dZbr3i7Sb107txZOTk5Sk9PV0VFhSZP\nnqzGxkbv7Sb1IkmnTp3S6tWr9e2332ry5MnGvsa+53K5NHr06B+tN6mXv/zlL+rQoYNee+01HTp0\nSDNmzFBc3H9Pz2p3Ly0yyMPxlLCxsbGqr69XTEyMjh07dtm0e6j74IMPtHbtWm3YsEFxcXHG9lJW\nVqZ27drplltuUc+ePdXY2KjWrVsb2cvu3btVUVGh3bt36+jRo4qOjjb2eWnfvr0yMjIkSZ06ddJN\nN92kgwcPGtlLu3bt1L9/fzkcDnXq1EmtW7dWZGSkkb18z+12a+HChYqIiPBOT0syqpf9+/fr7rvv\nliT16NFD586dU0NDg/d2u3tpkVPr4XhK2DvvvNPb086dOzVkyJAgV+SbmpoaLVu2TK+++qri4+Ml\nmdvLJ598oo0bN0q6dPimrq7O2F5Wrlypt956S3/+85+VmZmp7OxsY3spLi7Wa6+9JknyeDw6ceKE\nxowZY2Qvd999t/bu3auLFy+qurra6NeYdCngWrdurejoaEVFRelnP/uZPvnkE0lm9XLbbbfpwIED\nkqTKykq1bt1aXbt2DVgvLfbMbitWrNAnn3ziPSVsjx49gl2Sz8rKyrR06VJVVlbK4XCoffv2WrFi\nhfLy8nTu3Dl16NBBhYWFioqKCnapzdq2bZteeeUVdenSxbtuyZIlWrhwoXG91NfX63e/+52OHDmi\n+vp65eTkKCUlRfPnzzeulx965ZVX1LFjR919991G9vLdd99p3rx5OnPmjC5cuKCcnBz17NnTyF6k\nS4duXC6XJOm3v/2tevfubWwvZWVlWrlypTZs2CDp0ncZnnvuOV28eFF9+/ZVfn5+kCv0TW1trRYs\nWKATJ06ooaFBs2fPltPpDFgvLTbIAQAIBy1yah0AgHBBkAMAYDCCHAAAgxHkAAAYjCAHAMBgBDkA\nAAYjyAEAMBhBDgCAwf4feGKg5FVvmJwAAAAASUVORK5CYII=\n","text/plain":["<matplotlib.figure.Figure at 0x7fd20b240630>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"DuOOYC6J0_-9","colab_type":"text"},"cell_type":"markdown","source":["From the histogram we see that there is a good distribution of age, and mostly passengers were at 20-40 age range."]},{"metadata":{"id":"B81K9yO_ZiBz","colab_type":"code","outputId":"9e4310a8-7431-4faa-c38a-96231bf83816","executionInfo":{"status":"ok","timestamp":1544826837646,"user_tz":300,"elapsed":334,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["# Missing values in the Age variable\n","train_df['Age'].isna().sum()"],"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["177"]},"metadata":{"tags":[]},"execution_count":40}]},{"metadata":{"id":"HlNTiWrOPSXL","colab_type":"text"},"cell_type":"markdown","source":["One concern is the missing age variables - close to 20% is missing. There are many ways of approaching to missing variables. A common approach is to replace the missing values with the mean."]},{"metadata":{"id":"tYDWrWbUbGDo","colab_type":"code","colab":{}},"cell_type":"code","source":["# impute age missing data with the mean age\n","train_df[\"Age\"] = train_df[\"Age\"].fillna(train_df[\"Age\"].mean())"],"execution_count":0,"outputs":[]},{"metadata":{"id":"iE5wm5Fhbu8U","colab_type":"code","outputId":"72cf2081-a795-47e2-910c-ead279a078ef","executionInfo":{"status":"ok","timestamp":1544826840503,"user_tz":300,"elapsed":356,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["# checking if our mean imputation worked\n","train_df['Age'].isna().sum()"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":42}]},{"metadata":{"id":"TAGc1PjN2VsB","colab_type":"text"},"cell_type":"markdown","source":["Since we have missing Age data in the test dataset, we need to impute that as well."]},{"metadata":{"id":"NHFnT51f2QOy","colab_type":"code","outputId":"57aef05b-d07b-40ed-898a-7b0cfcb766da","executionInfo":{"status":"ok","timestamp":1544826841186,"user_tz":300,"elapsed":356,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":[" # impute age missing data with the mean age\n","test_df[\"Age\"] = test_df[\"Age\"].fillna(test_df[\"Age\"].mean())\n","\n","# checking if our mean imputation worked\n","test_df['Age'].isna().sum()"],"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":43}]},{"metadata":{"id":"AtnaUaSZdHgz","colab_type":"text"},"cell_type":"markdown","source":["Now that we treated missing values from the Age variable, we can examine if there is a relationship between age and survival rate"]},{"metadata":{"id":"RdgaUvL2c55R","colab_type":"code","outputId":"a5e0132e-758a-429a-d409-5b4ea49e21d8","executionInfo":{"status":"ok","timestamp":1544828350574,"user_tz":300,"elapsed":324,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":166}},"cell_type":"code","source":["# survival x age\n","pd.crosstab(train_df.Survived, train_df.Age, normalize = \"index\")"],"execution_count":110,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>Age</th>\n","      <th>0.42</th>\n","      <th>0.67</th>\n","      <th>0.75</th>\n","      <th>0.83</th>\n","      <th>0.92</th>\n","      <th>1.0</th>\n","      <th>2.0</th>\n","      <th>3.0</th>\n","      <th>4.0</th>\n","      <th>5.0</th>\n","      <th>...</th>\n","      <th>62.0</th>\n","      <th>63.0</th>\n","      <th>64.0</th>\n","      <th>65.0</th>\n","      <th>66.0</th>\n","      <th>70.0</th>\n","      <th>70.5</th>\n","      <th>71.0</th>\n","      <th>74.0</th>\n","      <th>80.0</th>\n","    </tr>\n","    <tr>\n","      <th>Survived</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.003643</td>\n","      <td>0.012750</td>\n","      <td>0.001821</td>\n","      <td>0.005464</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0.003643</td>\n","      <td>0.000000</td>\n","      <td>0.003643</td>\n","      <td>0.005464</td>\n","      <td>0.001821</td>\n","      <td>0.003643</td>\n","      <td>0.001821</td>\n","      <td>0.003643</td>\n","      <td>0.001821</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.002924</td>\n","      <td>0.002924</td>\n","      <td>0.005848</td>\n","      <td>0.005848</td>\n","      <td>0.002924</td>\n","      <td>0.014620</td>\n","      <td>0.008772</td>\n","      <td>0.014620</td>\n","      <td>0.020468</td>\n","      <td>0.011696</td>\n","      <td>...</td>\n","      <td>0.005848</td>\n","      <td>0.005848</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.002924</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2 rows × 89 columns</p>\n","</div>"],"text/plain":["Age          0.42      0.67      0.75      0.83      0.92      1.00   \\\n","Survived                                                               \n","0         0.000000  0.000000  0.000000  0.000000  0.000000  0.003643   \n","1         0.002924  0.002924  0.005848  0.005848  0.002924  0.014620   \n","\n","Age          2.00      3.00      4.00      5.00     ...        62.00  \\\n","Survived                                            ...                \n","0         0.012750  0.001821  0.005464  0.000000    ...     0.003643   \n","1         0.008772  0.014620  0.020468  0.011696    ...     0.005848   \n","\n","Age          63.00     64.00     65.00     66.00     70.00     70.50  \\\n","Survived                                                               \n","0         0.000000  0.003643  0.005464  0.001821  0.003643  0.001821   \n","1         0.005848  0.000000  0.000000  0.000000  0.000000  0.000000   \n","\n","Age          71.00     74.00     80.00  \n","Survived                                \n","0         0.003643  0.001821  0.000000  \n","1         0.000000  0.000000  0.002924  \n","\n","[2 rows x 89 columns]"]},"metadata":{"tags":[]},"execution_count":110}]},{"metadata":{"id":"oLYLptGtdgcg","colab_type":"text"},"cell_type":"markdown","source":["The table above doesn't give much information since age is a continuous variable. One way to address this is by creating groups and converting it to a categorical variable\n","\n","Next, we will create three groups under a new variable called **Age2**: kids, adults, elder. I picked 18 and 50 as the age limits - you can try different age ranges. This is similar to a very basic feature engineering."]},{"metadata":{"id":"3fjStU0-eV4X","colab_type":"code","outputId":"ce071178-6873-469f-b778-c61d810027d7","executionInfo":{"status":"ok","timestamp":1544826844183,"user_tz":300,"elapsed":764,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"cell_type":"code","source":["# create Age2 categorical variable in the train dataset\n","train_df['Age2']  = 2\n","train_df['Age2'].loc[train_df['Age'] < 18] = 1\n","train_df['Age2'].loc[train_df['Age'] > 50] = 3\n","\n","# create Age2 categorical variable in the test dataset\n","test_df['Age2']  = 2\n","test_df['Age2'].loc[test_df['Age'] < 18] = 1\n","test_df['Age2'].loc[test_df['Age'] > 50] = 3"],"execution_count":45,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:194: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n","  self._setitem_with_indexer(indexer, value)\n"],"name":"stderr"}]},{"metadata":{"id":"g6m2T8iwfrnk","colab_type":"text"},"cell_type":"markdown","source":["Let's try crosstabulation of Age and Survived one more time with the Age2 variable."]},{"metadata":{"id":"B5kVSxSjfZTh","colab_type":"code","outputId":"9797dd1e-4079-4974-d59c-9eb05f7cf806","executionInfo":{"status":"ok","timestamp":1544826845283,"user_tz":300,"elapsed":544,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":378}},"cell_type":"code","source":["# survival x age group\n","sns.heatmap(pd.crosstab(train_df.Survived, train_df.Age2, normalize = \"columns\"), cmap=\"YlGnBu\", annot=True, cbar=False)"],"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd20b2401d0>"]},"metadata":{"tags":[]},"execution_count":46},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<matplotlib.figure.Figure at 0x7fd20e9bd0f0>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"GPI7M4e5f_2y","colab_type":"text"},"cell_type":"markdown","source":["As you can see from the above heatmap, there is not much information for the age group 1 in terms of survival  percentage (46% vs 54%). However, it shows that if you are 18 or older, you are more likely not to survive (~60%) than survive (~30%).\n","\n","While this gives a better view of age, it still doesn't tell much.\n","\n","Next, we can crosstabulate with age and gender against the survival rate."]},{"metadata":{"id":"JLCDJp0tihz5","colab_type":"code","outputId":"74900608-8c74-4db1-cf03-21636d48ae04","executionInfo":{"status":"ok","timestamp":1544826847194,"user_tz":300,"elapsed":627,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":378}},"cell_type":"code","source":["# survival x age group and gender\n","sns.heatmap(pd.crosstab(train_df.Survived, [train_df.Sex, train_df.Age2], normalize = \"columns\"), cmap=\"YlGnBu\", annot=True, cbar=False)"],"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd208f34668>"]},"metadata":{"tags":[]},"execution_count":47},{"output_type":"display_data","data":{"image/png":"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\n1kRERIL7P2V+DLo18QZhAAAAAElFTkSuQmCC\n","text/plain":["<matplotlib.figure.Figure at 0x7fd208f15588>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"3_es9HXPj6Zd","colab_type":"text"},"cell_type":"markdown","source":["We already knew that survival rate for females are high. But in the above figure, we see that older females have the best chance of survival (94% vs. 74% and 69%). On the other hand, we see that older males have the least chance of survival (13% and 17% vs. 0.4%).\n","\n","Overall, age groups with gender give us a better understanding than just gender."]},{"metadata":{"id":"uSFYSYg1kgru","colab_type":"text"},"cell_type":"markdown","source":["## Does Embarkation Point Matter?\n","\n","<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/51/Titanic_voyage_map.png\" width=\"50%\">\n","<br/>\n","source: [Wikipedia: By Prioryman ](https://commons.wikimedia.org/w/index.php?curid=18584123)\n","\n","Let’s look at `Embarked`. There is no point of doing  `describe` since this is a categorical variable. We can do `crosstab` and see how embarkation points were distributed."]},{"metadata":{"id":"ARSJ73Hsk6qo","colab_type":"code","outputId":"17dbfba9-2373-468f-dc9e-e46d97ec3914","executionInfo":{"status":"ok","timestamp":1544826849457,"user_tz":300,"elapsed":321,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":167}},"cell_type":"code","source":["pd.crosstab(train_df.Embarked, columns = \"Embark. Point\")"],"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>col_0</th>\n","      <th>Embark. Point</th>\n","    </tr>\n","    <tr>\n","      <th>Embarked</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>C</th>\n","      <td>168</td>\n","    </tr>\n","    <tr>\n","      <th>Q</th>\n","      <td>77</td>\n","    </tr>\n","    <tr>\n","      <th>S</th>\n","      <td>644</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["col_0     Embark. Point\n","Embarked               \n","C                   168\n","Q                    77\n","S                   644"]},"metadata":{"tags":[]},"execution_count":48}]},{"metadata":{"id":"iFMCrLQ-l6MX","colab_type":"code","outputId":"3015b1ee-e0f2-4019-c529-21c2df8b8b5d","executionInfo":{"status":"ok","timestamp":1544826851688,"user_tz":300,"elapsed":334,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["# Checking for missing values\n","train_df['Embarked'].isna().sum()"],"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{"tags":[]},"execution_count":49}]},{"metadata":{"id":"Ut62pRyumJf_","colab_type":"text"},"cell_type":"markdown","source":["There are two data points where the embarkation point is missing. Since this is a categorical variable, we cannot replace the missing values with the mean. We can drop them, randomly assign them to a point, or do a bit guesstimation as in the following part.\n","\n","First, we check which passengers have the missing embarked variable."]},{"metadata":{"id":"k7dQCPzDl6CJ","colab_type":"code","outputId":"2c43f694-a52f-4044-e937-c8b222804067","executionInfo":{"status":"ok","timestamp":1544826853341,"user_tz":300,"elapsed":341,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":141}},"cell_type":"code","source":["print(train_df[train_df['Embarked'].isnull()])"],"execution_count":50,"outputs":[{"output_type":"stream","text":["     PassengerId  Survived  Pclass                                       Name  \\\n","61            62         1       1                        Icard, Miss. Amelie   \n","829          830         1       1  Stone, Mrs. George Nelson (Martha Evelyn)   \n","\n","        Sex   Age  SibSp  Parch  Ticket  Fare Cabin Embarked  Age2  \n","61   female  38.0      0      0  113572  80.0   B28      NaN     2  \n","829  female  62.0      0      0  113572  80.0   B28      NaN     3  \n"],"name":"stdout"}]},{"metadata":{"id":"WCFUgR7vpKpb","colab_type":"text"},"cell_type":"markdown","source":["Both passengers paid 80.0 pounds for firstclass (Pclass = 1). Having this information, we can check the median prices of the embarkation points."]},{"metadata":{"id":"3LECsQxApe6k","colab_type":"code","outputId":"07977baa-1d61-4c0a-f94a-9ce0fd1891d1","executionInfo":{"status":"ok","timestamp":1544826854169,"user_tz":300,"elapsed":436,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"cell_type":"code","source":["#train_df.groupby(by=\"Embarked\")\n","train_df[train_df.Pclass == 1].groupby(\"Embarked\").Fare.median()"],"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Embarked\n","C    78.2667\n","Q    90.0000\n","S    52.0000\n","Name: Fare, dtype: float64"]},"metadata":{"tags":[]},"execution_count":51}]},{"metadata":{"id":"IyFjOskrsg_p","colab_type":"text"},"cell_type":"markdown","source":["We see that embarkation point C is the closest to 80 pounds and therefore we can assign the missing embarked variables to C."]},{"metadata":{"id":"HGzc0s7nstse","colab_type":"code","outputId":"fda0c7a5-af6c-42b6-8ff0-43a108ad4539","executionInfo":{"status":"ok","timestamp":1544826855771,"user_tz":300,"elapsed":460,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"cell_type":"code","source":["train_df[\"Embarked\"][pd.isnull(train_df.Embarked)] = \"C\""],"execution_count":52,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n","  \"\"\"Entry point for launching an IPython kernel.\n"],"name":"stderr"}]},{"metadata":{"id":"9vpIkgFhumxe","colab_type":"code","outputId":"a992b401-6853-401d-c5cf-9c8b51f6ef04","executionInfo":{"status":"ok","timestamp":1544828255705,"user_tz":300,"elapsed":346,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":3394}},"cell_type":"code","source":["# Let's check if we still have missing Embarked variable\n","print(train_df[train_df['Embarked'].isnull()])"],"execution_count":109,"outputs":[{"output_type":"stream","text":["     PassengerId  Survived  Pclass  \\\n","0              1         0       3   \n","1              2         1       1   \n","2              3         1       3   \n","3              4         1       1   \n","4              5         0       3   \n","5              6         0       3   \n","6              7         0       1   \n","7              8         0       3   \n","8              9         1       3   \n","9             10         1       2   \n","10            11         1       3   \n","11            12         1       1   \n","12            13         0       3   \n","13            14         0       3   \n","14            15         0       3   \n","15            16         1       2   \n","16            17         0       3   \n","17            18         1       2   \n","18            19         0       3   \n","19            20         1       3   \n","20            21         0       2   \n","21            22         1       2   \n","22            23         1       3   \n","23            24         1       1   \n","24            25         0       3   \n","25            26         1       3   \n","26            27         0       3   \n","27            28         0       1   \n","28            29         1       3   \n","29            30         0       3   \n","..           ...       ...     ...   \n","861          862         0       2   \n","862          863         1       1   \n","863          864         0       3   \n","864          865         0       2   \n","865          866         1       2   \n","866          867         1       2   \n","867          868         0       1   \n","868          869         0       3   \n","869          870         1       3   \n","870          871         0       3   \n","871          872         1       1   \n","872          873         0       1   \n","873          874         0       3   \n","874          875         1       2   \n","875          876         1       3   \n","876          877         0       3   \n","877          878         0       3   \n","878          879         0       3   \n","879          880         1       1   \n","880          881         1       2   \n","881          882         0       3   \n","882          883         0       3   \n","883          884         0       2   \n","884          885         0       3   \n","885          886         0       3   \n","886          887         0       2   \n","887          888         1       1   \n","888          889         0       3   \n","889          890         1       1   \n","890          891         0       3   \n","\n","                                                  Name  Sex        Age  SibSp  \\\n","0                              Braund, Mr. Owen Harris  NaN  22.000000      1   \n","1    Cumings, Mrs. John Bradley (Florence Briggs Th...  NaN  38.000000      1   \n","2                               Heikkinen, Miss. Laina  NaN  26.000000      0   \n","3         Futrelle, Mrs. Jacques Heath (Lily May Peel)  NaN  35.000000      1   \n","4                             Allen, Mr. William Henry  NaN  35.000000      0   \n","5                                     Moran, Mr. James  NaN  29.699118      0   \n","6                              McCarthy, Mr. Timothy J  NaN  54.000000      0   \n","7                       Palsson, Master. Gosta Leonard  NaN   2.000000      3   \n","8    Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  NaN  27.000000      0   \n","9                  Nasser, Mrs. Nicholas (Adele Achem)  NaN  14.000000      1   \n","10                     Sandstrom, Miss. Marguerite Rut  NaN   4.000000      1   \n","11                            Bonnell, Miss. Elizabeth  NaN  58.000000      0   \n","12                      Saundercock, Mr. William Henry  NaN  20.000000      0   \n","13                         Andersson, Mr. Anders Johan  NaN  39.000000      1   \n","14                Vestrom, Miss. Hulda Amanda Adolfina  NaN  14.000000      0   \n","15                    Hewlett, Mrs. (Mary D Kingcome)   NaN  55.000000      0   \n","16                                Rice, Master. Eugene  NaN   2.000000      4   \n","17                        Williams, Mr. Charles Eugene  NaN  29.699118      0   \n","18   Vander Planke, Mrs. Julius (Emelia Maria Vande...  NaN  31.000000      1   \n","19                             Masselmani, Mrs. Fatima  NaN  29.699118      0   \n","20                                Fynney, Mr. Joseph J  NaN  35.000000      0   \n","21                               Beesley, Mr. Lawrence  NaN  34.000000      0   \n","22                         McGowan, Miss. Anna \"Annie\"  NaN  15.000000      0   \n","23                        Sloper, Mr. William Thompson  NaN  28.000000      0   \n","24                       Palsson, Miss. Torborg Danira  NaN   8.000000      3   \n","25   Asplund, Mrs. Carl Oscar (Selma Augusta Emilia...  NaN  38.000000      1   \n","26                             Emir, Mr. Farred Chehab  NaN  29.699118      0   \n","27                      Fortune, Mr. Charles Alexander  NaN  19.000000      3   \n","28                       O'Dwyer, Miss. Ellen \"Nellie\"  NaN  29.699118      0   \n","29                                 Todoroff, Mr. Lalio  NaN  29.699118      0   \n","..                                                 ...  ...        ...    ...   \n","861                        Giles, Mr. Frederick Edward  NaN  21.000000      1   \n","862  Swift, Mrs. Frederick Joel (Margaret Welles Ba...  NaN  48.000000      0   \n","863                  Sage, Miss. Dorothy Edith \"Dolly\"  NaN  29.699118      8   \n","864                             Gill, Mr. John William  NaN  24.000000      0   \n","865                           Bystrom, Mrs. (Karolina)  NaN  42.000000      0   \n","866                       Duran y More, Miss. Asuncion  NaN  27.000000      1   \n","867               Roebling, Mr. Washington Augustus II  NaN  31.000000      0   \n","868                        van Melkebeke, Mr. Philemon  NaN  29.699118      0   \n","869                    Johnson, Master. Harold Theodor  NaN   4.000000      1   \n","870                                  Balkic, Mr. Cerin  NaN  26.000000      0   \n","871   Beckwith, Mrs. Richard Leonard (Sallie Monypeny)  NaN  47.000000      1   \n","872                           Carlsson, Mr. Frans Olof  NaN  33.000000      0   \n","873                        Vander Cruyssen, Mr. Victor  NaN  47.000000      0   \n","874              Abelson, Mrs. Samuel (Hannah Wizosky)  NaN  28.000000      1   \n","875                   Najib, Miss. Adele Kiamie \"Jane\"  NaN  15.000000      0   \n","876                      Gustafsson, Mr. Alfred Ossian  NaN  20.000000      0   \n","877                               Petroff, Mr. Nedelio  NaN  19.000000      0   \n","878                                 Laleff, Mr. Kristo  NaN  29.699118      0   \n","879      Potter, Mrs. Thomas Jr (Lily Alexenia Wilson)  NaN  56.000000      0   \n","880       Shelley, Mrs. William (Imanita Parrish Hall)  NaN  25.000000      0   \n","881                                 Markun, Mr. Johann  NaN  33.000000      0   \n","882                       Dahlberg, Miss. Gerda Ulrika  NaN  22.000000      0   \n","883                      Banfield, Mr. Frederick James  NaN  28.000000      0   \n","884                             Sutehall, Mr. Henry Jr  NaN  25.000000      0   \n","885               Rice, Mrs. William (Margaret Norton)  NaN  39.000000      0   \n","886                              Montvila, Rev. Juozas  NaN  27.000000      0   \n","887                       Graham, Miss. Margaret Edith  NaN  19.000000      0   \n","888           Johnston, Miss. Catherine Helen \"Carrie\"  NaN  29.699118      1   \n","889                              Behr, Mr. Karl Howell  NaN  26.000000      0   \n","890                                Dooley, Mr. Patrick  NaN  32.000000      0   \n","\n","     Parch            Ticket      Fare        Cabin  Embarked  Age2  \n","0        0         A/5 21171    7.2500          NaN       NaN     2  \n","1        0          PC 17599   71.2833          C85       NaN     2  \n","2        0  STON/O2. 3101282    7.9250          NaN       NaN     2  \n","3        0            113803   53.1000         C123       NaN     2  \n","4        0            373450    8.0500          NaN       NaN     2  \n","5        0            330877    8.4583          NaN       NaN     2  \n","6        0             17463   51.8625          E46       NaN     3  \n","7        1            349909   21.0750          NaN       NaN     1  \n","8        2            347742   11.1333          NaN       NaN     2  \n","9        0            237736   30.0708          NaN       NaN     1  \n","10       1           PP 9549   16.7000           G6       NaN     1  \n","11       0            113783   26.5500         C103       NaN     3  \n","12       0         A/5. 2151    8.0500          NaN       NaN     2  \n","13       5            347082   31.2750          NaN       NaN     2  \n","14       0            350406    7.8542          NaN       NaN     1  \n","15       0            248706   16.0000          NaN       NaN     3  \n","16       1            382652   29.1250          NaN       NaN     1  \n","17       0            244373   13.0000          NaN       NaN     2  \n","18       0            345763   18.0000          NaN       NaN     2  \n","19       0              2649    7.2250          NaN       NaN     2  \n","20       0            239865   26.0000          NaN       NaN     2  \n","21       0            248698   13.0000          D56       NaN     2  \n","22       0            330923    8.0292          NaN       NaN     1  \n","23       0            113788   35.5000           A6       NaN     2  \n","24       1            349909   21.0750          NaN       NaN     1  \n","25       5            347077   31.3875          NaN       NaN     2  \n","26       0              2631    7.2250          NaN       NaN     2  \n","27       2             19950  263.0000  C23 C25 C27       NaN     2  \n","28       0            330959    7.8792          NaN       NaN     2  \n","29       0            349216    7.8958          NaN       NaN     2  \n","..     ...               ...       ...          ...       ...   ...  \n","861      0             28134   11.5000          NaN       NaN     2  \n","862      0             17466   25.9292          D17       NaN     2  \n","863      2          CA. 2343   69.5500          NaN       NaN     2  \n","864      0            233866   13.0000          NaN       NaN     2  \n","865      0            236852   13.0000          NaN       NaN     2  \n","866      0     SC/PARIS 2149   13.8583          NaN       NaN     2  \n","867      0          PC 17590   50.4958          A24       NaN     2  \n","868      0            345777    9.5000          NaN       NaN     2  \n","869      1            347742   11.1333          NaN       NaN     1  \n","870      0            349248    7.8958          NaN       NaN     2  \n","871      1             11751   52.5542          D35       NaN     2  \n","872      0               695    5.0000  B51 B53 B55       NaN     2  \n","873      0            345765    9.0000          NaN       NaN     2  \n","874      0         P/PP 3381   24.0000          NaN       NaN     2  \n","875      0              2667    7.2250          NaN       NaN     1  \n","876      0              7534    9.8458          NaN       NaN     2  \n","877      0            349212    7.8958          NaN       NaN     2  \n","878      0            349217    7.8958          NaN       NaN     2  \n","879      1             11767   83.1583          C50       NaN     3  \n","880      1            230433   26.0000          NaN       NaN     2  \n","881      0            349257    7.8958          NaN       NaN     2  \n","882      0              7552   10.5167          NaN       NaN     2  \n","883      0  C.A./SOTON 34068   10.5000          NaN       NaN     2  \n","884      0   SOTON/OQ 392076    7.0500          NaN       NaN     2  \n","885      5            382652   29.1250          NaN       NaN     2  \n","886      0            211536   13.0000          NaN       NaN     2  \n","887      0            112053   30.0000          B42       NaN     2  \n","888      2        W./C. 6607   23.4500          NaN       NaN     2  \n","889      0            111369   30.0000         C148       NaN     2  \n","890      0            370376    7.7500          NaN       NaN     2  \n","\n","[891 rows x 13 columns]\n"],"name":"stdout"}]},{"metadata":{"id":"-qvwao64_TKu","colab_type":"text"},"cell_type":"markdown","source":["Now that we have no missing values, we can examine the survival rate by embarkation point."]},{"metadata":{"id":"c2f1KflHvXBR","colab_type":"code","outputId":"d45e167b-1388-4768-bce0-98ef0335069d","executionInfo":{"status":"ok","timestamp":1544826857836,"user_tz":300,"elapsed":408,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":378}},"cell_type":"code","source":["# survival x embarkation point\n","sns.heatmap(pd.crosstab(train_df.Survived, train_df.Embarked, normalize=\"columns\"), cmap=\"YlGnBu\", annot=True, cbar=False)"],"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd206e69c18>"]},"metadata":{"tags":[]},"execution_count":53},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAesAAAFYCAYAAABzrdR6AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAHw1JREFUeJzt3X2czPX+//Hn7MXszq6LXF9fZCki\nWrEnliQ6RymKwqmjwykOWt/E1/VVJcrFaaODIx0R66K2DtKyqS0kQglJiL2waF3by5md3Z3fH/s7\nozmk/XaanffYx/12c6t573t2Xh+35bGfz8xYi8vlcgkAABgrwNcDAACA6yPWAAAYjlgDAGA4Yg0A\ngOGINQAAhiPWAAAYLsjXA/ycZUcTfT0CbjAvDU7z9Qi4gaQfS/L1CLgB5aWtuuY6Z9YAABiOWAMA\nYDhiDQCA4Yg1AACGI9YAABiOWAMAYDhiDQCA4Yg1AACGI9YAABiOWAMAYDhiDQCA4Yg1AACGI9YA\nABiOWAMAYDhiDQCA4Yg1AACGI9YAABiOWAMAYDhiDQCA4Yg1AACGI9YAABiOWAMAYDhiDQCA4Yg1\nAACGI9YAABiOWAMAYDhiDQCA4Yg1AACGI9YAABiOWAMAYDhiDQCA4Yg1AACGI9YAABiOWAMAYDhi\nDQCA4Yg1AACGI9YAABiOWAMAYDhiDQCA4Yg1AACGI9YAABiOWAMAYDhiDQCA4Yg1AACGI9YAABiO\nWAMAYDhiDQCA4Yg1AACGI9YAABiOWAMAYDhiDQCA4Yg1AACGI9YAABiOWAMAYDhiDQCA4Yg1AACG\nI9YAABiOWAMAYDhiDQCA4Yg1AACGI9YAABiOWAMAYDhiDQCA4Yg1AACGI9YAABiOWAMAYDhiDQCA\n4Yg1AACGI9aGStl3RP98dpb+MXiaVk6ar8xzF392b8bxk3ql5wil7j961cc++edazf/L816cFP7i\nrsjaWrvoEX30dh8tnX2/alYNv2pPuC1Yc6d20ZbVf9SmZY/pD3c3dH8sLDRIf5vYWYc+fqoUp4bJ\nOrVvri8+nKH9n72qDXETVKdm5av2lAsP1YoFz+rIjtf1TdIcPXx/lPtjTZvU0dZ103Rw22vatn6a\nmjapU5rj+xVibaB8u0NrZy1V9+F/1JA3JqtJVAttmv/ONfe6ioq0acEahVeqcNXHMo6f1JGd+709\nLvyALTRIr02+VxPmbNXvn3xHSTvS9OLIDlftGz/sLp09n6tO/VZp6KSP9KeHmyswwCJJWvP3HjqZ\nkVXao8NQYbYQvf334Ro29g21vGekEj7+SvNevvobuZlT+uvHMxd1S7vheuzpv2nIn3+vwMAABQRY\ntHrRc/rbwvVq3nGE5r+VqIH9OvvgSPwDsTZQ6r4juqlmFdVsXE+S1Oq+u3R87/dy5Nqv2vv1xu2q\n0aiuKtWs6rH+74jf/afupTIzzNYusrZOnM7Ud0fPS5LiEw4ruk0dhduC3XuswQF6sEuEFqzYK0lK\nPnFZ/Ud+qMIilyRp8qufa80H35f+8DDSPdHNlZJ2Rt98myJJWrbmM3Xt2FLlwkPde6zWIPXp0V4z\nX18rSTp6/LS69XtJhYVFatfmFhUUFmndpt2SpNX/+lxjp60o9ePwF16NdU5OjlJTU5Wamqrc3Fxv\nPtQN5cLJsx7xtdpCZCsfrounz3rsy76Yqd3rt+ieJx+86nN8vWm7qjWsrTpNG3p7XPiBhnUrKu3U\nlbPiXHuBLmU61KDOlSsyDepUlMNRoN7dbtHGtx5V/IKeat+6tvvj33x3plRnhtma3FxLx1Mz3Ldz\nch06fylLEQ1rutcaN6ypPHu++j/WSV9/Mlvb1k9T5w4tJEm3N2ugtPRzeuNvQ7T/s1f1/ltj1KBe\ntVI/Dn/hlVgfOHBA/fr102OPPaYJEyZo/Pjx6tGjh5544gkdPnzYGw95Q3E68hVkDfZYC7YGy2nP\n91jb/Mb76tDvDwotF+axnn0xU7vXbVHnAT28Piv8gy00SI78Qo81h6NAttAg9+0K5awqXy5EjvxC\n3T8wXq+99ZVef6GrKpYPKe1x4QdsNqvsDqfHmt2er/CwK18vN1UM100VwmR35Kt1l9F6Yc67Wrlw\nhCpVDFfFCuHq8LumWrx8s1p1HqV9B1O05LVhpX0YfiPol7f8382YMUPTp09XRESEx/rBgwf14osv\nKi4uzhsPe8MIDrWqIN/zD4HTkS+r7cofguNfHVJeVo5adG571f0/XlwccVu5MDly8rw+L8yXay9Q\niDXQYy00NEi5eVe+zrJy8hUYYNHKdd9Jkj7fna5TGdm647bq2vLliVKdF+bLzXUoNMTzpMIWGqLs\nnCtP113OzFVgYIDeWP6xJOnjrft14tR5RbVuosysXO3/LlW7vzkmSZq3+EONiempMFuIcvMcpXcg\nfsIrsXa5XFeFWpKaN2+uwsLCa9wDP1Wlbg0d2rbXfduekyd7dq4q1b5yiejwjv3KOJ6uuX+aKEnK\ny87VezP+qfsG9dIPuw8qdf9RffLPtSoqKpI9O1dz/zRRz7z1vIKCg696PNz4jqddUvfOjdy3y4UH\nq2K5EKWczHSvnT6TI0kKD7PqclbxX5ZFRS73c9bATx0+dkqPPtTOfbtCeZsqVQzXD8k/utfSTxe/\nRqJ8eKguXi7++iosLFJhYZHSTp5ThfJXrgoWFhV5/BeevBLrVq1aaciQIeratasqVy5+Kf+5c+eU\nmJioqKioX7g3GrRsog/nrtSJg8dUr3mEdq39VI2jWsgaeuXM+v6Yvro/pq/79opx89Tx8fvVoGUT\n3d7lyu/xpYzzihv/up5Z8nxpHgIMs3PvKb085m7d2aKGvvo2QwMfvV2f7kxTnr3AvScrJ1/bdqfr\nqb6369U396hVs2qqU7O8Dnx/9jqfGWXVli8O6h+z/6r2bW/VF7sPa/jTD2jjJ197nBVfzszV5i37\nNeKvD2rqrDVqe0eEGtSrqq/2HZMjv0ALZw1Wl46365NtB/TU4120Y88ROf7j0jqKeSXW48eP1+7d\nu7Vjxw7t31/81qHq1asrJiZGkZGR3njIG0pwiFUPjxmgxIXvyunIV6VaVfXgc39S1rlLWjVloQYv\nGO/rEeFnHPmFGvFikqaOiFZYaJBST2Zq7CtbVKNqmJbMul/d//KeJGnC7K2aNf4efbqqn7Jy8jXi\nxU90Ocuh25pU0auT7lVwYICCAgO0adljkqRuf37Xl4cFH7I7nHoyZp5ipw1UeFiIjqVkaPCohapd\no5LWrxivNveNkSQNHfOG3owdqu+3z9PlrFz1HzbPfZbdb/Crev3lpxViDVLayXMaNGqhLw/JaBaX\ny2XkNa5lRxN9PQJuMC8NTvP1CLiBpB9L8vUIuAHlpa265jrvswYAwHDEGgAAwxFrAAAMR6wBADAc\nsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAM\nR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAA\nwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYA\nwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wB\nADAcsQYAwHDEGgAAwxFrAAAMF3S9D+7evfu6d27btu1vOgwAALjadWMdGxsrScrPz9eRI0fUqFEj\nFRYWKjk5Wa1atVJcXFypDAkAQFl23VivXLlSkjR27FgtXLhQ1apVkySdPn1ac+fO9f50AACgZM9Z\np6amukMtSbVq1VJ6errXhgIAAFdc98z63ypVqqSRI0fqzjvvlMVi0d69exUaGurt2QAAgEoY69jY\nWK1fv15HjhyRy+VSZGSkevbs6e3ZAACAShjr0NBQ3XHHHapcubK6du2qzMxMhYeHe3s2AACgEsZ6\n6dKl2rBhg/Lz89W1a1ctWLBAFSpU0LBhw7w9HwAAZV6JXmC2YcMGvfPOO6pYsaIkacyYMfrss8+8\nORcAAPj/ShTr8PBwBQRc2RoQEOBxGwAAeE+JLoPXr19ff//735WZmamPPvpICQkJioiI8PZsAABA\nJTyznjJlimw2m2rUqKH169erVatWmjp1qrdnAwAAKuGZ9bx589SzZ0899dRT3p4HAAD8hxLFOiws\nTM8995yCg4PVo0cPPfjgg6pataq3ZwMAACrhZfChQ4fqgw8+0OzZs5WVlaXBgwdr0KBB3p4NAADo\n//jzrENCQmSz2WSz2ZSXl+etmQAAwE+U6DL4okWLlJiYKKfTqQcffFAzZ85U3bp1vT0bAABQCWN9\n+fJlzZgxQ02bNvX2PAAA4D9cN9bvvfeeevfuLavVqsTERCUmJnp8/Nlnn/XqcAAA4Bdi/e9/pSwo\nqEQn4AAAwAuuW+FHHnlEkmS32/Xwww+rcePGpTKUJE1dWlhqj4WyYduGmr4eATeQeuEv+HoElCEl\nOmUODw/nfdYAAPiIxeVyuUq6+dixY0pISNCnn36qKlWqaPHixV4brOHEBK99bpRN2yZwtQa/nXrh\nt/p6BNyQbrnmKu+zBgDAcLzPGgAAw/E+awAADFeiy+AHDhwg1AAA+EiJzqybNWumuXPnKjIyUsHB\nwe71du3aeW0wAABQrESxPnTokCRpz5497jWLxUKsAQAoBSWK9fLly709BwAA+BklivXjjz8ui8Vy\n1XpcXNxvPhAAAPBUoliPGDHC/f9Op1M7d+5UWFiY14YCAABXlCjWUVFRHrejo6M1aNAgrwwEAAA8\nlSjWJ06c8Lh96tQpJScne2UgAADgqUSx/vOf/yyp+BXgFotF5cqVU0xMjFcHAwAAxa4b6+zsbMXH\nxyspKUmStGrVKq1atUr169dXhw4dSmVAAADKuuv+C2ZTpkzR+fPnJUnJycmKjY3V+PHjFR0drenT\np5fKgAAAlHXXjfWJEyc0atQoSVJiYqK6deumdu3aqW/fvjp37lypDAgAQFl33Vj/9O1Zu3bt0l13\n3eW+fa33XQMAgN/edWNdWFio8+fPKy0tTXv37lV0dLQkKScnh59nDQBAKbnuC8wGDRqkBx54QHa7\nXTExMapYsaLsdrsef/xx9enTp7RmBACgTLO4XC7X9TY4nU45HA6VK1fOvfb55597/dXgDScmePXz\no+zZNqHQ1yPgBlIv/FZfj4Ab0i3XXP3F91kHBwd7/FhMSbxtCwCAUnTd56wBAIDvEWsAAAxHrAEA\nMByxBgDAcMQaAADDEWsAAAxHrAEAMByxBgDAcMQaAADDEWsAAAxHrAEAMByxBgDAcMQaAADDEWsA\nAAxHrAEAMByxBgDAcMQaAADDEWsAAAxHrAEAMByxBgDAcMQaAADDEWsAAAxHrAEAMByxBgDAcMQa\nAADDEWsAAAxHrAEAMByxBgDAcMQaAADDEWsAAAxHrAEAMByxBgDAcMQaAADDEWsAAAxHrAEAMByx\nBgDAcMQaAADDEWsAAAxHrAEAMByxBgDAcMQaAADDEWsAAAxHrAEAMByxBgDAcMQaAADDBfl6AFxb\nu0ZVNPH+pgqzBunkpTyNfm+/fsy0e+xJmf6Ajp3Ndt/+MdOuJ5bskiQ1rlZOc3q3VKWwYF3Mc+p/\n4/frh5/sRdmzd9dRLXptg/JyHapRq5JGP99X1Wrc5LFn31fHtHjuBuVk2xUSatWwUT3U8s4ISdLq\npUn66IM9ysvL191dWmrIyIdksVh8cSgwxI4d+zRr1hLl5tpVu3Z1vfzys6pZs6rHnl27Dmj27KXK\nysqRzRaiCRMGqW3bFh57VqzYoGnTFunw4Q9Kc3y/wpm1gWzBgXq97x0a+68Dujd2iz75PkPTe7a4\n5t4ur211//p3qAMs0qInWmvh1mPq9OoWLf0iRf3a1CvNQ4Bh8vIcmj5+hUZNfkzL1o5Tu7tv02vT\n3/PY47A79cLoZfqfcb311vtj1X/wfZo2boVcLpd2bT+kjf/apblvxejtdeN09FC6Pv7wax8dDUyQ\nm2vXyJGz9dJLw5WYuEidO7fV1KnzPfbY7Q4NH/6ypk4dqk2b/qFnnvmjRoyYKZfL5d5z5swFrVmT\nWNrj+x1ibaD2EVV04kKuDp7KlCS981W6OjauqnBrYInuf2f9SioocinxuwxJ0tp9p/TSxkNemxfm\n+2bXD6pZp4qaNKsrSerWM0pf7Tyi3JwrV2uczgKNmtJHt9xWvKd1VBNdPJ+l7Kw8fbXzqKI7t1D5\nCmEKDg5Sjz7ttS1pv0+OBWbYuXO/6tWrqebNG0uSeve+T9u3f6Ps7Fz3HqezQNOn/49atCje065d\nK507d0mZmTnuPdOnv6GhQ/uU7vB+qNRjnZmZWdoP6XdurhKu1AtXvuBz8wt1KS9fDauEX7U39rFW\n2vxsR615+i61rl98SbNZrQo6eSlPc3q3VNJznbTkyTaqW8lWavPDPOlpZ1W7XhX3bVtYiCrcFKaT\nJ86718qVtyn6nuIrOC6XSxvX7tLtkTerfIUwWSxSUVGRx/1PnThXegcA46SknFS9ejXdt8PDbbrp\npvJKSzvtXitfPlxdu94lqfhrKj5+s9q0aa6KFctJkrZs2aPs7Dw98EDH0h3eD5V6rGNiYkr7If2O\nzRooR0GRx5rdWSTbf5xZr9ydpkVbj+u+udv09s4U/bN/G1UIDVKF0CBFNaysFV+mqstrW3TwVKZi\nH21VmocAwzjsTlmtwR5r1pBg2fPyr9q79eN96vP7F/VB/BcaMbG3JKn1727RZx/t09mMS7Ln5Svh\nX18q31FQKrPDTHl5DoWEWD3WQkKsys21X7V306bt6tDhSa1alaAXXhgmqfgS+cyZSzR16pBSmdff\neeUFZnFxcT/7sYyMDG885A0lN79QIUGe30fZggOVm+/5l+OEtd+6///Db39UTOfGal2/krLsBfru\ndKa+Sb8sSXpze7Ke6RQhW3Cg8pyF3j8AGCfUZlV+vtNjzWF3yhZmvWrv3V1b6e6urbR311GNGvwP\nvbF6pKKim+qRfh00ZugilSsfpg73ttDZHy+V1vgwUFhYqBwOz2/27HaHwsOvvorXrVu0unWL1o4d\n+/TkkxO1bt08vf32ej30UCfVr1+rtEb2a145s166dKkOHz6sixcvXvWroIDvxn/JsbPZHpe8y4cE\nqYItSMnnrlwaD7MGqlFVz8viQQEWFRS6dPJSnsqHXvk+rKio+MUcRT95UQfKlnoNq3tcts7OylN2\nZq7q1L/yyt0zP17S9k+vfAMYGdVE1apX1KEDaZKkvgM66633x+r1ZcNVqUp53dz4yiVQlD2NGtX1\nuOSdlZWjy5ez1aBBbffa6dNn9fHHO9y327VrpZo1q2jfvu+VlPSlli/foOjo/oqO7i9Jio7ur9TU\nU6V3EH7EK7GeP3++UlJSNHjwYMXExHj8ql279i9/gjJux/HzqnOTTW0aVJIkPRV9s5K+P+txVlyr\nYqje/2s7NagcJknq2LiqKoVZ9U36JW0/dl7Vy4eoY+Piv4j/2Lae9qRdvOrSOsqOO9o0VsbpSzqw\nN1mS9F7cVv2u422y2ULcewqcBZo1dbVSjv0oqfh57pPp59Ugooa+2fODRg1eKKezQLk5dr0Xt1X3\nPdTGJ8cCM/zud7fr1Kkz2rPnoCRp6dJ16ty5rcLCQt17nM4CjRs3V0ePpkqSUlJOKTX1tBo3bqAP\nP1ygL75Yru3bi39J0vbtyz1ijyssLpd3Trfy8vIUEhKigADP7wcOHjyo5s2b/+L9G05M8MZYfuOu\nmytravfbZLMGKvV8rv73vX0KCLDo7QFR+sO8bZKkXnfU0dBOjRRgsehynlMvJRzS1yeKL022aVBJ\nM3q2kDUoQCcv5Wn82m+V9pMXrZVF2yaU7acAvtnzgxbMXid7Xr5q16uqMS/0VVGRS+OeeUNvvjta\nkrRl8z6tWPyxCgoKZJFFfQd01h96tFVhYZHmvfy+dn/xvQICLOr9xN165I9l+0VB9cJv9fUIPvfl\nlwc0ffobystzqH79WnrllREqKirSU09N0YYNxW/j2rjxcy1YsEZOp1MWi0WDBvVWr15dr/pct976\nEO+zliTdcs1Vr8X6v1XWY43fXlmPNX5bxBrece1Y8z5rAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAM\nR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAA\nwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYA\nwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wB\nADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFr\nAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDE\nGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAcsQYAwHDEGgAAwxFrAAAMR6wBADAc\nsQYAwHAWl8vl8vUQAADg53FmDQCA4Yg1AACGI9YAABiOWAMAYDhiDQCA4Yg1AACGC/L1APh1UlJS\nNGPGDF24cEFFRUWKjIzU2LFjZbVafT0a/NSJEyc0ffp0nT17Vi6XS23atNGoUaMUEhLi69Hgp+Li\n4rRu3TpZrVbZ7XaNHDlS7du39/VYfon3WfuhwsJCPfzww5o8ebKioqLkcrn00ksvqVy5cnruued8\nPR78UFFRkXr16qWxY8eqXbt2kqQlS5bo8OHDmjlzpo+ngz9KT0/XM888o/j4eAUHByslJUWTJk3S\nihUrfD2aX+LM2g9t375djRo1UlRUlCTJYrFo9OjRCgjgWQ38Otu3b1eDBg3coZakgQMHqlu3brpw\n4YIqV67sw+ngj7Kzs+VwOOR0OhUcHKyGDRsS6v8Cf7v7oePHj6tZs2Yea6GhoVwCx692/Phx3Xbb\nbR5rFotFTZo0UXJyso+mgj9r2rSpWrZsqS5dumjcuHFKSEhQQUGBr8fyW8TaD1ksFhUWFvp6DNxA\nXC7XNb+mXC6XeKYMv9asWbO0YsUKNW3aVG+++aYGDhzI19OvRKz9UKNGjXTgwAGPtfz8fB05csRH\nE8Hf3Xzzzfr222891lwul3744Qc1atTIR1PBn7lcLjkcDkVERGjAgAF69913lZGRoVOnTvl6NL9E\nrP1QdHS0Tp48qaSkJEnFLw6aPXu2EhISfDwZ/FWHDh107Ngxbdmyxb22dOlSRUZG8nw1fpX4+HhN\nnjzZfSadlZWloqIiValSxceT+SdeDe6nzpw5oylTpujMmTOyWq1q3769YmJieJEZfrUTJ05o7Nix\nys7OlsvlUmRkpCZOnMhbt/CrFBYWas6cOdq9e7fCwsJUUFCgwYMH65577vH1aH6JWAPw8PXXX+uV\nV17R6tWr+eYPMAR/EgF4aN26tVq2bKlevXpp48aNvh4HgDizBgDAeJxZAwBgOGINAIDhiDUAAIbj\n3wYH/Ex6erq6deumyMhIj/VOnTrp6aef/sX79+/fX0OHDv3VP/3ov7l/bGysgoKCNHz48F/12EBZ\nRawBP1S5cmUtX77c12MAKCXEGriBREZGaujQoUpKSpLT6dSQIUP0zjvvKDk5Wc8//7w6dOggSUpK\nStKbb76pjIwMDRs2TN27d9exY8c0depUBQYGKjs7WyNGjFDHjh31+uuvKz09XadOndLYsWM9Hm/8\n+PGqU6eOYmJitHz5cm3cuFGFhYVq1KiRpk6dqtDQUMXGxurTTz9VrVq1ZLPZFBER4YvfGsCv8Zw1\ncAPJzc1VixYttHr1aoWFhSkpKUmLFy/WsGHDtHLlSve+wsJCLVmyRAsWLND06dNVVFSkc+fO6dln\nn9WyZcs0adIkxcbGuvenp6fr7bffVosWLdxr8+bNU1hYmGJiYrR//35t3rxZcXFxWrNmjcqXL693\n331XycnJ+uCDDxQfH6/58+crNTW1VH8/gBsFZ9aAH7pw4YL69+/vsTZ69GhJ0p133ilJqlGjhlq3\nbi1JqlmzprKystx7o6OjJUkNGjRwf75q1app1qxZio2NldPp1KVLl9z7W7VqJYvF4r79/vvv6/jx\n44qPj5ckffnll0pLS9OTTz4pqfibhqCgIB05ckTNmzd3//jWNm3a/Ha/CUAZQqwBP3S956wDAwOv\n+f8/9dPwulwuWSwWTZs2Td27d9ejjz6qI0eOaMiQIe49wcHBHvfPz8+X0+nUzp071b59e1mtVt17\n772aMmWKx75NmzZ5PFZRUVHJDxKAG5fBgTJox44dkqTk5GQFBgaqcuXKOnfunJo0aSJJSkhIUH5+\n/s/ev1+/fpozZ44mT56sCxcuqHXr1tq6datycnIkSXFxcdq7d68iIiL03XffueO+a9cu7x8ccAPi\nzBrwQ9e6DF63bt0S3z8oKEhDhw5VWlqaJk2aJIvFor/85S8aM2aM6tatqwEDBmjz5s165ZVXFB4e\nfs3Pceutt2rgwIEaN26cFi1apCeeeEL9+/dXSEiIqlevrl69eslms6lr167q06ePateurWbNmv1X\nxw2UVfzb4AAAGI7L4AAAGI5YAwBgOGINAIDhiDUAAIYj1gAAGI5YAwBgOGINAIDhiDUAAIb7f1bK\n4IRz++ieAAAAAElFTkSuQmCC\n","text/plain":["<matplotlib.figure.Figure at 0x7fd206e43f28>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"ELcCFyz6vvwc","colab_type":"text"},"cell_type":"markdown","source":["The above heatmap doesn't give too much detail other than, Q and S have less survival rate and C is about the same.\n","\n","Let's add gender to the mix."]},{"metadata":{"id":"BEUInh7EvU_K","colab_type":"code","outputId":"25a48f69-a174-487f-fb38-7e5b12128c01","executionInfo":{"status":"error","timestamp":1544828370104,"user_tz":300,"elapsed":427,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":685}},"cell_type":"code","source":["# survival x gender and embarkation point\n","sns.heatmap(pd.crosstab(train_df.Survived, [train_df.Sex, train_df.Embarked], normalize = \"columns\"), cmap=\"YlGnBu\", annot=True, cbar=False)"],"execution_count":111,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-111-0da0de3df41e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcrosstab\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSurvived\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtrain_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEmbarked\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnormalize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"YlGnBu\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcbar\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36mheatmap\u001b[0;34m(data, vmin, vmax, cmap, center, robust, annot, fmt, annot_kws, linewidths, linecolor, cbar, cbar_kws, cbar_ax, square, ax, xticklabels, yticklabels, mask, **kwargs)\u001b[0m\n\u001b[1;32m    483\u001b[0m     plotter = _HeatMapper(data, vmin, vmax, cmap, center, robust, annot, fmt,\n\u001b[1;32m    484\u001b[0m                           \u001b[0mannot_kws\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcbar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcbar_kws\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxticklabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 485\u001b[0;31m                           yticklabels, mask)\n\u001b[0m\u001b[1;32m    486\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    487\u001b[0m     \u001b[0;31m# Add the pcolormesh kwargs here\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, vmin, vmax, cmap, center, robust, annot, fmt, annot_kws, cbar, cbar_kws, xticklabels, yticklabels, mask)\u001b[0m\n\u001b[1;32m    165\u001b[0m         \u001b[0;31m# Determine good default values for the colormapping\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    166\u001b[0m         self._determine_cmap_params(plot_data, vmin, vmax,\n\u001b[0;32m--> 167\u001b[0;31m                                     cmap, center, robust)\n\u001b[0m\u001b[1;32m    168\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    169\u001b[0m         \u001b[0;31m# Sort out the annotations\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36m_determine_cmap_params\u001b[0;34m(self, plot_data, vmin, vmax, cmap, center, robust)\u001b[0m\n\u001b[1;32m    204\u001b[0m         \u001b[0mcalc_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplot_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnan\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplot_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mvmin\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 206\u001b[0;31m             \u001b[0mvmin\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpercentile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcalc_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mrobust\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mcalc_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    207\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mvmax\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    208\u001b[0m             \u001b[0mvmax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpercentile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcalc_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m98\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mrobust\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mcalc_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/_methods.py\u001b[0m in \u001b[0;36m_amin\u001b[0;34m(a, axis, out, keepdims)\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_amin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mumr_minimum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_sum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: zero-size array to reduction operation minimum which has no identity"]}]},{"metadata":{"id":"xhBNyO2Jv_tw","colab_type":"text"},"cell_type":"markdown","source":["Now we see that Females from C point have 88% survival rate and Males from Q point has 7%.\n","\n","However, there is not much new information provided by Embarkation point.\n"]},{"metadata":{"id":"DUoYIUbmQMjs","colab_type":"text"},"cell_type":"markdown","source":["\n","## Does Class Matter?\n","\n","Let's look at the survival rate by `Pclass` variable."]},{"metadata":{"id":"G73F87vN0-xE","colab_type":"code","outputId":"4361012e-7004-4533-accc-796ace7731e4","executionInfo":{"status":"ok","timestamp":1544828371969,"user_tz":300,"elapsed":455,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":378}},"cell_type":"code","source":["# survival x class\n","sns.heatmap(pd.crosstab(train_df.Survived, train_df.Pclass, normalize=\"columns\"), cmap=\"YlGnBu\", annot=True, cbar=False)"],"execution_count":112,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fd206357128>"]},"metadata":{"tags":[]},"execution_count":112},{"output_type":"display_data","data":{"image/png":"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\nAAAASUVORK5CYII=\n","text/plain":["<matplotlib.figure.Figure at 0x7fd2063a6a58>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"5X7Ybw8K1XhG","colab_type":"text"},"cell_type":"markdown","source":["In the above heatmap, we see that there is a good chance of surviving if you are in class 1 (first class) and there is a good chance of not surviving if you are in class 3.\n","\n","Let's add gender and then embarkation point to class and see whether we can have better classification."]},{"metadata":{"id":"L7LEr7nT2AfK","colab_type":"code","outputId":"f044e0be-d503-4fc3-f26c-eb9bdbc31faa","executionInfo":{"status":"error","timestamp":1544828249793,"user_tz":300,"elapsed":324,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":685}},"cell_type":"code","source":["# survival x gender and class\n","sns.heatmap(pd.crosstab(train_df.Survived, [train_df.Sex, train_df.Pclass], normalize = \"columns\"), cmap=\"YlGnBu\", annot=True, cbar=False)"],"execution_count":108,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-108-93d23c1ead43>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcrosstab\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSurvived\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtrain_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPclass\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnormalize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"YlGnBu\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcbar\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36mheatmap\u001b[0;34m(data, vmin, vmax, cmap, center, robust, annot, fmt, annot_kws, linewidths, linecolor, cbar, cbar_kws, cbar_ax, square, ax, xticklabels, yticklabels, mask, **kwargs)\u001b[0m\n\u001b[1;32m    483\u001b[0m     plotter = _HeatMapper(data, vmin, vmax, cmap, center, robust, annot, fmt,\n\u001b[1;32m    484\u001b[0m                           \u001b[0mannot_kws\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcbar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcbar_kws\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxticklabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 485\u001b[0;31m                           yticklabels, mask)\n\u001b[0m\u001b[1;32m    486\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    487\u001b[0m     \u001b[0;31m# Add the pcolormesh kwargs here\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, vmin, vmax, cmap, center, robust, annot, fmt, annot_kws, cbar, cbar_kws, xticklabels, yticklabels, mask)\u001b[0m\n\u001b[1;32m    165\u001b[0m         \u001b[0;31m# Determine good default values for the colormapping\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    166\u001b[0m         self._determine_cmap_params(plot_data, vmin, vmax,\n\u001b[0;32m--> 167\u001b[0;31m                                     cmap, center, robust)\n\u001b[0m\u001b[1;32m    168\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    169\u001b[0m         \u001b[0;31m# Sort out the annotations\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36m_determine_cmap_params\u001b[0;34m(self, plot_data, vmin, vmax, cmap, center, robust)\u001b[0m\n\u001b[1;32m    204\u001b[0m         \u001b[0mcalc_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplot_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnan\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplot_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mvmin\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 206\u001b[0;31m             \u001b[0mvmin\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpercentile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcalc_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mrobust\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mcalc_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    207\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mvmax\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    208\u001b[0m             \u001b[0mvmax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpercentile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcalc_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m98\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mrobust\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mcalc_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/_methods.py\u001b[0m in \u001b[0;36m_amin\u001b[0;34m(a, axis, out, keepdims)\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_amin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mumr_minimum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_sum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: zero-size array to reduction operation minimum which has no identity"]}]},{"metadata":{"id":"7d5N1j-h2rcQ","colab_type":"text"},"cell_type":"markdown","source":["In the above heatmap, we see that Females in class 1 and 2 have a very good chance of survival, and males in class 2 and 3 has a very low chance of survival."]},{"metadata":{"id":"RTC2_mWh2DVf","colab_type":"code","outputId":"c3dbbdf1-f481-4c83-bcf4-099c4ab5ebf6","executionInfo":{"status":"error","timestamp":1544828375223,"user_tz":300,"elapsed":344,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":685}},"cell_type":"code","source":["# survival x gender, class, and embarkation point\n","sns.heatmap(pd.crosstab(train_df.Survived, [train_df.Sex, train_df.Pclass, train_df.Embarked], normalize = \"columns\"), cmap=\"YlGnBu\", annot=True, cbar=False)"],"execution_count":113,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-113-f854e4871849>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcrosstab\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSurvived\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mtrain_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPclass\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEmbarked\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnormalize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"YlGnBu\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcbar\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36mheatmap\u001b[0;34m(data, vmin, vmax, cmap, center, robust, annot, fmt, annot_kws, linewidths, linecolor, cbar, cbar_kws, cbar_ax, square, ax, xticklabels, yticklabels, mask, **kwargs)\u001b[0m\n\u001b[1;32m    483\u001b[0m     plotter = _HeatMapper(data, vmin, vmax, cmap, center, robust, annot, fmt,\n\u001b[1;32m    484\u001b[0m                           \u001b[0mannot_kws\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcbar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcbar_kws\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxticklabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 485\u001b[0;31m                           yticklabels, mask)\n\u001b[0m\u001b[1;32m    486\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    487\u001b[0m     \u001b[0;31m# Add the pcolormesh kwargs here\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, vmin, vmax, cmap, center, robust, annot, fmt, annot_kws, cbar, cbar_kws, xticklabels, yticklabels, mask)\u001b[0m\n\u001b[1;32m    165\u001b[0m         \u001b[0;31m# Determine good default values for the colormapping\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    166\u001b[0m         self._determine_cmap_params(plot_data, vmin, vmax,\n\u001b[0;32m--> 167\u001b[0;31m                                     cmap, center, robust)\n\u001b[0m\u001b[1;32m    168\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    169\u001b[0m         \u001b[0;31m# Sort out the annotations\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/seaborn/matrix.py\u001b[0m in \u001b[0;36m_determine_cmap_params\u001b[0;34m(self, plot_data, vmin, vmax, cmap, center, robust)\u001b[0m\n\u001b[1;32m    204\u001b[0m         \u001b[0mcalc_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplot_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnan\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplot_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mvmin\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 206\u001b[0;31m             \u001b[0mvmin\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpercentile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcalc_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mrobust\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mcalc_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    207\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mvmax\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    208\u001b[0m             \u001b[0mvmax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpercentile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcalc_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m98\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mrobust\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mcalc_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/_methods.py\u001b[0m in \u001b[0;36m_amin\u001b[0;34m(a, axis, out, keepdims)\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_amin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mumr_minimum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_sum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: zero-size array to reduction operation minimum which has no identity"]}]},{"metadata":{"id":"owXiwhYm3LpL","colab_type":"text"},"cell_type":"markdown","source":["With embarkation point, we further see that males from embark point Q has almost no chance of survival. Moreover, we see that females from embark point S has a very low survival rate, even among class 3 females."]},{"metadata":{"id":"0TcskLkDCCJr","colab_type":"text"},"cell_type":"markdown","source":["**Submission 2**\n","\n","We can create our second prediction as all females except those embarked from S and in class 3 (38% survival rate) survived and the rest of the passengers (males) did not survive."]},{"metadata":{"id":"hPb2vjTCEsBI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":523},"outputId":"4c28f274-ccd4-433f-c8a0-35e36ea30828","executionInfo":{"status":"error","timestamp":1544828377881,"user_tz":300,"elapsed":350,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}}},"cell_type":"code","source":["# set all passengers to did not survive\n","test_df['Survived']  = 0\n","\n","# set females to survived\n","test_df.loc[test_df['Sex'] == \"female\", \"Survived\"] = 1\n","\n","# set females in class 3 from embark S did not survive\n","filter = (test_df['Sex'] == \"female\") & (test_df['Embarked'] == \"S\") & (test_df['Pclass'] == 3)\n","test_df.loc[filter, \"Survived\"] = 0"],"execution_count":114,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/ops.py:816: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n","  result = getattr(x, name)(y)\n"],"name":"stderr"},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-114-d19225f315a6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# set females to survived\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mtest_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtest_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Sex'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"female\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Survived\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# set females in class 3 from embark S did not survive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/ops.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(self, other, axis)\u001b[0m\n\u001b[1;32m    877\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    878\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrstate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'ignore'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 879\u001b[0;31m                 \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mna_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    880\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    881\u001b[0m                 raise TypeError('Could not compare {typ} type with Series'\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/ops.py\u001b[0m in \u001b[0;36mna_op\u001b[0;34m(x, y)\u001b[0m\n\u001b[1;32m    816\u001b[0m                     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    817\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mNotImplemented\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 818\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"invalid type comparison\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    819\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    820\u001b[0m                 \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: invalid type comparison"]}]},{"metadata":{"id":"l9dKcD8hCBpB","colab_type":"code","colab":{}},"cell_type":"code","source":["\n","# create the submission file using the test_df\n","submission = pd.DataFrame({\n","        \"PassengerId\": test_df[\"PassengerId\"],\n","        \"Survived\": test_df[\"Survived\"]\n","    })\n","\n","# convert the dataframe to csv file\n","submission.to_csv('titanic-mc2.csv', index=False)\n","\n","# download the submission file to our computer\n","files.download('titanic-mc2.csv')\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"oUUC2T42N_q6","colab_type":"text"},"cell_type":"markdown","source":["\n","---\n","\n","\n","**`Kaggle Score: 0.77990`**\n","\n","\n","---"]},{"metadata":{"id":"HRe_prI9OJy8","colab_type":"text"},"cell_type":"markdown","source":["There is some improvement from first manual classification to the second one. We can add Age2 and new variables to see their effect. However, manual classification is not practical in real-life scenarios. Therefore, we can move to investigating various Machine Learning methods."]},{"metadata":{"id":"1pwmp-j5rCPU","colab_type":"text"},"cell_type":"markdown","source":["# Machine Learning Methods\n","\n"]},{"metadata":{"id":"Okv9XSqzOsYc","colab_type":"text"},"cell_type":"markdown","source":["We will be using scikit-learn library for our machine learning examples. scikit-learn have certain requirements from the data. One of them is that the variables considered for the model needs to be in numeric format. So the first step is convert our variables to numbers."]},{"metadata":{"id":"a6ZXWdsLrHlN","colab_type":"code","colab":{}},"cell_type":"code","source":["# string -> number for train_df\n","train_df['Sex'] = train_df['Sex'].map({'male': 0, 'female': 1})\n","train_df['Embarked'] = train_df['Embarked'].map({'S': 0, 'Q': 1, 'C': 2})\n","\n","# string -> number for test_df\n","test_df['Sex'] = test_df['Sex'].map({'male': 0, 'female': 1})\n","test_df['Embarked'] = test_df['Embarked'].map({'S': 0, 'Q': 1, 'C': 2})\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"qG3TMI81Pz4P","colab_type":"text"},"cell_type":"markdown","source":["Next, we are going to create our training and test sets with the variables that we are interested."]},{"metadata":{"id":"_PKRJP7GrTcC","colab_type":"code","colab":{}},"cell_type":"code","source":["# define training and testing sets\n","X_train = train_df[[\"Sex\",\"Age2\", \"Embarked\", \"Pclass\"]]\n","Y_train = train_df[\"Survived\"]\n","X_test  = test_df[[\"Sex\", \"Age2\", \"Embarked\", \"Pclass\"]]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"uiU9fldLQzpe","colab_type":"text"},"cell_type":"markdown","source":["In the following three sections, we will do our predictions using Decision Trees, Random Forests, and Logistic Regression. All three methods have very similar mechanics (and similar to DataCamp exercises), with the exception of fine-tuning. Each method has its own hyperparameters or parameters for tuning."]},{"metadata":{"id":"jCQw8WtW6fmy","colab_type":"text"},"cell_type":"markdown","source":["## Decision Trees"]},{"metadata":{"id":"5y7l9LVjkmWJ","colab_type":"code","colab":{}},"cell_type":"code","source":["# load decision tree method\n","from sklearn.tree import DecisionTreeClassifier\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"s0uUTI7wjXYc","colab_type":"code","colab":{}},"cell_type":"code","source":["dt = DecisionTreeClassifier (random_state = 1)\n","# random_state is the seed for the random number generator. \n","# If we all have 1, then we all have the same results\n","# Important for replicability of the results\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"DsYXE6C44zKW","colab_type":"code","outputId":"4de82041-ba43-43ba-d4ca-99ccfef845a0","executionInfo":{"status":"error","timestamp":1544828565132,"user_tz":300,"elapsed":350,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":738}},"cell_type":"code","source":["dt.fit(X_train, Y_train)\n","\n","# train and predict \n","Y_pred = dt.predict(X_test)"],"execution_count":130,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-130-26bf7cc3c556>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# train and predict\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mY_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/tree/tree.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input, X_idx_sorted)\u001b[0m\n\u001b[1;32m    799\u001b[0m             \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    800\u001b[0m             \u001b[0mcheck_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcheck_input\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 801\u001b[0;31m             X_idx_sorted=X_idx_sorted)\n\u001b[0m\u001b[1;32m    802\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    803\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/tree/tree.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, check_input, X_idx_sorted)\u001b[0m\n\u001b[1;32m    114\u001b[0m         \u001b[0mrandom_state\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_random_state\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcheck_input\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 116\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mDTYPE\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"csc\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m             \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mensure_2d\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0missparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, warn_on_dtype, estimator)\u001b[0m\n\u001b[1;32m    571\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    572\u001b[0m             _assert_all_finite(array,\n\u001b[0;32m--> 573\u001b[0;31m                                allow_nan=force_all_finite == 'allow-nan')\n\u001b[0m\u001b[1;32m    574\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    575\u001b[0m     \u001b[0mshape_repr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_shape_repr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan)\u001b[0m\n\u001b[1;32m     54\u001b[0m                 not allow_nan and not np.isfinite(X).all()):\n\u001b[1;32m     55\u001b[0m             \u001b[0mtype_err\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'infinity'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mallow_nan\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m'NaN, infinity'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 56\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg_err\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtype_err\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     57\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Input contains NaN, infinity or a value too large for dtype('float32')."]}]},{"metadata":{"id":"xs7IROHRSjxj","colab_type":"code","outputId":"549ef3fc-c16c-4003-e33b-2b639f826e3c","executionInfo":{"status":"error","timestamp":1544828487138,"user_tz":300,"elapsed":377,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":416}},"cell_type":"code","source":["# we can check the importance of our variables. Order is Sex, Age2, Embarked, Pclass\n","dt.feature_importances_"],"execution_count":123,"outputs":[{"output_type":"error","ename":"NotFittedError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNotFittedError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-123-9cc52729b6b3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeature_importances_\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/tree/tree.py\u001b[0m in \u001b[0;36mfeature_importances_\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    508\u001b[0m         \u001b[0mfeature_importances_\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mn_features\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    509\u001b[0m         \"\"\"\n\u001b[0;32m--> 510\u001b[0;31m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'tree_'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    511\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    512\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree_\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute_feature_importances\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_is_fitted\u001b[0;34m(estimator, attributes, msg, all_or_any)\u001b[0m\n\u001b[1;32m    949\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    950\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mall_or_any\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mattr\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mattributes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 951\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mNotFittedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'name'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    952\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    953\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNotFittedError\u001b[0m: This DecisionTreeClassifier instance is not fitted yet. Call 'fit' with appropriate arguments before using this method."]}]},{"metadata":{"id":"6C1bxAA0XPer","colab_type":"text"},"cell_type":"markdown","source":["We can also create our actual decision tree. This requires installation of the graphviz package to the VM Linux and then to python."]},{"metadata":{"id":"w9bGl7x1XiPh","colab_type":"code","outputId":"0a3e48bc-c27a-487d-c2a4-010ebcffd22a","executionInfo":{"status":"ok","timestamp":1544827881339,"user_tz":300,"elapsed":5487,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":123}},"cell_type":"code","source":["! apt-get install graphviz\n","! pip install graphviz\n","import graphviz "],"execution_count":98,"outputs":[{"output_type":"stream","text":["Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","graphviz is already the newest version (2.40.1-2).\n","0 upgraded, 0 newly installed, 0 to remove and 8 not upgraded.\n","Requirement already satisfied: graphviz in /usr/local/lib/python3.6/dist-packages (0.10.1)\n"],"name":"stdout"}]},{"metadata":{"id":"9yTfdjKFUfvh","colab_type":"code","outputId":"4ae42326-861c-45dc-fcef-c134adf8aba9","executionInfo":{"status":"error","timestamp":1544827888521,"user_tz":300,"elapsed":323,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":507}},"cell_type":"code","source":["from sklearn import tree\n","\n","dot_data = tree.export_graphviz(dt, out_file=None, \n","                     feature_names=[\"Sex\", \"Age2\", \"Embarked\", \"Pclass\"],  \n","                     class_names=[\"Survived\", \"Died\"],  \n","                     filled=True, rounded=True,  \n","                     special_characters=True)\n","\n","\n","\n","graph = graphviz.Source(dot_data)\n","graph\n","                       "],"execution_count":99,"outputs":[{"output_type":"error","ename":"NotFittedError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNotFittedError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-99-262aeb279f42>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m                      \u001b[0mclass_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"Survived\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Died\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m                      \u001b[0mfilled\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrounded\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m                      special_characters=True)\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/tree/export.py\u001b[0m in \u001b[0;36mexport_graphviz\u001b[0;34m(decision_tree, out_file, max_depth, feature_names, class_names, label, filled, leaves_parallel, impurity, node_ids, proportion, rotate, rounded, special_characters, precision)\u001b[0m\n\u001b[1;32m    394\u001b[0m                 \u001b[0mout_file\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'%d -> %d ;\\n'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mparent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnode_id\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    395\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 396\u001b[0;31m     \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdecision_tree\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'tree_'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    397\u001b[0m     \u001b[0mown_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    398\u001b[0m     \u001b[0mreturn_string\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_is_fitted\u001b[0;34m(estimator, attributes, msg, all_or_any)\u001b[0m\n\u001b[1;32m    949\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    950\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mall_or_any\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mattr\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mattributes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 951\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mNotFittedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m'name'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    952\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    953\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNotFittedError\u001b[0m: This DecisionTreeClassifier instance is not fitted yet. Call 'fit' with appropriate arguments before using this method."]}]},{"metadata":{"id":"tHxC4i73YF4v","colab_type":"text"},"cell_type":"markdown","source":["Next, we can submit our prediction."]},{"metadata":{"id":"2YX3Xio1pe-2","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":238},"outputId":"af4373fc-9636-4ef2-b1a1-e9037f521f2c","executionInfo":{"status":"error","timestamp":1544828105750,"user_tz":300,"elapsed":319,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}}},"cell_type":"code","source":["submission = pd.DataFrame({\n","        \"PassengerId\": test_df[\"PassengerId\"],\n","        \"Survived\": Y_pred\n","    })\n","submission.to_csv('titanic-dt1.csv', index=False)\n","\n","files.download('titanic-dt1.csv')"],"execution_count":107,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-107-bae4a5879f73>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m submission = pd.DataFrame({\n\u001b[1;32m      2\u001b[0m         \u001b[0;34m\"PassengerId\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtest_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"PassengerId\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m         \u001b[0;34m\"Survived\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mY_pred\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     })\n\u001b[1;32m      5\u001b[0m \u001b[0msubmission\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'titanic-dt1.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'Y_pred' is not defined"]}]},{"metadata":{"id":"MU1vxRSH3GMJ","colab_type":"text"},"cell_type":"markdown","source":["\n","---\n","\n","\n","**`Kaggle Score: 0.78468`**\n","\n","\n","---\n","\n"]},{"metadata":{"id":"yQD6B268rdTe","colab_type":"text"},"cell_type":"markdown","source":["### Fine Tuning Hyperparameters\n"]},{"metadata":{"id":"NhbAXULjsB7L","colab_type":"code","colab":{}},"cell_type":"code","source":["# check out the hyperparameters of decision tree method\n","print(dt.get_params())\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"JWAxnfWV6flD","colab_type":"text"},"cell_type":"markdown","source":["You can find the descriptions of the hyperparameters in the [scikit learn documentation](https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html). Picking the right hyperparamters and their values require expertise, knowledge of the dataset, and domain knowledge. For now, we will pick max_depth, min_samples_leaf, max_features hyperparameters. You can assign their values as the example below. However, what is more common is to set a range of values for each hyperparameter and train the model across all combinations of the values and pick the best one. We can automate this using scikit-learn's grid search."]},{"metadata":{"id":"Rxwu7duT-y-M","colab_type":"code","cellView":"code","outputId":"3064c835-b297-4531-ac3d-4a8b2a81e53a","executionInfo":{"status":"ok","timestamp":1544784014455,"user_tz":300,"elapsed":375,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":123}},"cell_type":"code","source":["#@title Default title text\n","# fine-tuning one value at a time\n","dt = DecisionTreeClassifier (max_depth=3,\n","                             min_samples_leaf=0.04,\n","                             max_features= 0.04,\n","                             random_state = 1)\n","\n","dt.fit(X_train, Y_train)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=3,\n","            max_features=0.04, max_leaf_nodes=None,\n","            min_impurity_decrease=0.0, min_impurity_split=None,\n","            min_samples_leaf=0.04, min_samples_split=2,\n","            min_weight_fraction_leaf=0.0, presort=False, random_state=1,\n","            splitter='best')"]},"metadata":{"tags":[]},"execution_count":39}]},{"metadata":{"id":"IC0VAf11GyPM","colab_type":"text"},"cell_type":"markdown","source":["### Grid Search\n","\n","\n","You can find the descriptions of the parameters of the GridSearchCV in the [scikit learn documentation](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html)"]},{"metadata":{"id":"5Ang9SF3DtiL","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"_kcu5pzTDPeo","colab_type":"code","colab":{}},"cell_type":"code","source":["# Import GridSearchCV\n","from sklearn.model_selection import GridSearchCV\n","\n","# Define your grid of hyperparameters\n","params_dt = {\n","'max_depth': [3, 4, 5, 6],\n","'min_samples_leaf': [0.04, 0.06, 0.08],\n","'max_features': [0.2, 0.4,0.6, 0.8]\n","}\n","\n","# Start a 10-fold CV grid search - check the URL above for descriptions of the following parameters\n","grid_dt = GridSearchCV(estimator=dt,\n","param_grid=params_dt,\n","scoring='accuracy',\n","cv=10,\n","n_jobs=-1)\n","\n","\n","#Fit 'grid_dt' to the training data\n","grid_dt.fit(X_train, Y_train)\n","\n","\n","# predict with the best estimators\n","Y_pred = grid_dt.best_estimator_.predict(X_test)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"dd5I7SR8a0Ce","colab_type":"code","outputId":"ea6c462a-88e6-4a75-d115-74a8ff4d0f61","executionInfo":{"status":"ok","timestamp":1544784022702,"user_tz":300,"elapsed":865,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["# we can check the best hyperparameter values and fine-tune even more if necessary\n","grid_dt.best_params_"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'max_depth': 5, 'max_features': 0.8, 'min_samples_leaf': 0.04}"]},"metadata":{"tags":[]},"execution_count":41}]},{"metadata":{"id":"U0QyXP32IASI","colab_type":"code","colab":{}},"cell_type":"code","source":["# prepare the submission file\n","submission = pd.DataFrame({\n","        \"PassengerId\": test_df[\"PassengerId\"],\n","        \"Survived\": Y_pred\n","    })\n","submission.to_csv('titanic-dt2.csv', index=False)\n","\n","files.download('titanic-dt2.csv')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"HTJT4ls2IZFH","colab_type":"text"},"cell_type":"markdown","source":["\n","---\n","\n","\n","**`Kaggle Score: 0.77990`**\n","\n","\n","---"]},{"metadata":{"id":"5uJ2iIDYsetR","colab_type":"text"},"cell_type":"markdown","source":["## Random Forests\n","\n","We can follow the same mechanics we used in decision trees and prepare our submission."]},{"metadata":{"id":"cUN08QRLsd2o","colab_type":"code","colab":{}},"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","rf = RandomForestClassifier(n_estimators=100)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"uDz-t8FKtfmK","colab_type":"code","outputId":"3cf35284-4611-4171-9a75-84d58aadf3c1","executionInfo":{"status":"ok","timestamp":1544784029396,"user_tz":300,"elapsed":353,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["rf.fit(X_train, Y_train)\n","Y_pred = rf.predict(X_test)\n","\n","dt.score(X_train, Y_train, sample_weight=None)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7867564534231201"]},"metadata":{"tags":[]},"execution_count":45}]},{"metadata":{"id":"cZxTKShhuVXp","colab_type":"code","colab":{}},"cell_type":"code","source":["# prepare the submission file\n","submission = pd.DataFrame({\n","        \"PassengerId\": test_df[\"PassengerId\"],\n","        \"Survived\": Y_pred\n","    })\n","submission.to_csv('titanic-rf1.csv', index=False)\n","\n","files.download('titanic-rf1.csv')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Rhuv7GSGRgXS","colab_type":"text"},"cell_type":"markdown","source":["---\n","\n","\n","**`Kaggle Score: 0.78468`**\n","\n","\n","---"]},{"metadata":{"id":"Xdgg4B9fRmFu","colab_type":"text"},"cell_type":"markdown","source":["### Fine Tuning Hyperparameters"]},{"metadata":{"id":"Z2NzDTOXRqi_","colab_type":"code","outputId":"64420b59-c902-4a5e-b544-703412123e57","executionInfo":{"status":"ok","timestamp":1544784033592,"user_tz":300,"elapsed":349,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"cell_type":"code","source":["# check out random forest hyperparameters\n","print(rf.get_params())\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["{'bootstrap': True, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'auto', 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_impurity_split': None, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': None, 'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}\n"],"name":"stdout"}]},{"metadata":{"id":"KGwg2Ab7R8Kt","colab_type":"code","colab":{}},"cell_type":"code","source":["# import GridSearchCV\n","from sklearn.model_selection import GridSearchCV\n","\n","# define your grid of hyperparameters\n","params_rf = {\n","'n_estimators': [1,3, 5, 10],\n","'max_depth': [2, 3, 4, 5, 20, 32],\n","'min_samples_leaf': [1, 5, 8 , 3],\n","'max_features': ['log2', 'sqrt']\n","}\n","\n","# start a 10-fold CV grid search - check the URL above for descriptions of the following parameters\n","grid_rf = GridSearchCV(estimator=rf,\n","param_grid=params_rf,\n","scoring='accuracy',\n","cv=25,\n","n_jobs=-1)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"oMBt_Gy-V5sy","colab_type":"code","outputId":"888730dc-bc9c-4b0c-9dad-acbfe61ab107","executionInfo":{"status":"ok","timestamp":1544784086801,"user_tz":300,"elapsed":50655,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":72}},"cell_type":"code","source":["# fit 'grid_dt' to the training data\n","# training our model may take a while!\n","grid_rf.fit(X_train, Y_train)\n","Y_pred = grid_rf.best_estimator_.predict(X_test)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_search.py:841: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n","  DeprecationWarning)\n"],"name":"stderr"}]},{"metadata":{"id":"vI_lMn7igB33","colab_type":"code","outputId":"05858569-e515-406c-a4ed-acdb176e4a53","executionInfo":{"status":"ok","timestamp":1544784086801,"user_tz":300,"elapsed":49014,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":87}},"cell_type":"code","source":["# check the best hyperparameter values\n","grid_rf.best_params_\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'max_depth': 5,\n"," 'max_features': 'log2',\n"," 'min_samples_leaf': 5,\n"," 'n_estimators': 10}"]},"metadata":{"tags":[]},"execution_count":50}]},{"metadata":{"id":"lrr6T9ICVbdT","colab_type":"code","colab":{}},"cell_type":"code","source":["# prepare the submission file\n","submission = pd.DataFrame({\n","        \"PassengerId\": test_df[\"PassengerId\"],\n","        \"Survived\": Y_pred\n","    })\n","submission.to_csv('titanic-rf2.csv', index=False)\n","\n","files.download('titanic-rf2.csv')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"YQbkpDC4WcOa","colab_type":"text"},"cell_type":"markdown","source":["---\n","\n","\n","**`Kaggle Score: 0.77990`**\n","\n","\n","---"]},{"metadata":{"id":"kwfVdwqAuex2","colab_type":"text"},"cell_type":"markdown","source":["## Logistic Regression\n","\n","We can follow the same mechanics above but this time we will fine-tune the parameters of logistic regression since it doesn't have hyperparameters."]},{"metadata":{"id":"O5OCTkmMvU3v","colab_type":"code","colab":{}},"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","lr = LogisticRegression()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"dElYKoDMvcz0","colab_type":"code","outputId":"92359dad-5f9b-455e-d844-71c6e8ec736c","executionInfo":{"status":"ok","timestamp":1544784087933,"user_tz":300,"elapsed":44558,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"cell_type":"code","source":["lr.fit(X_train, Y_train)\n","Y_pred = lr.predict(X_test)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n"],"name":"stderr"}]},{"metadata":{"id":"iUyApc5mvlWl","colab_type":"code","colab":{}},"cell_type":"code","source":["submission = pd.DataFrame({\n","        \"PassengerId\": test_df[\"PassengerId\"],\n","        \"Survived\": Y_pred\n","    })\n","submission.to_csv('titanic-lr1.csv', index=False)\n","\n","files.download('titanic-lr1.csv')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"p7Fiz4OusJ8_","colab_type":"text"},"cell_type":"markdown","source":["### Fine Tuning Logistic Regression Parameters\n"]},{"metadata":{"id":"dGHUhtsLk_1Y","colab_type":"code","outputId":"b5349a27-1521-4907-c196-19fefdf7c731","executionInfo":{"status":"ok","timestamp":1544784090399,"user_tz":300,"elapsed":44693,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"cell_type":"code","source":["# check out decision tree hyperparameters\n","print(lr.get_params())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["{'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'max_iter': 100, 'multi_class': 'warn', 'n_jobs': None, 'penalty': 'l2', 'random_state': None, 'solver': 'warn', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}\n"],"name":"stdout"}]},{"metadata":{"id":"F-LkI28PlMj1","colab_type":"code","colab":{}},"cell_type":"code","source":["params_lr = {'C': [0.001, 0.01, 0.05, 0.1, 1, 10, 100, 1000] }\n","grid_lr = GridSearchCV(LogisticRegression(penalty='l2'), params_lr)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"GQyFOB_ZnWyB","colab_type":"code","outputId":"c926f1b2-6be9-408d-d4a1-1333bd4d1fa7","executionInfo":{"status":"ok","timestamp":1544784090552,"user_tz":300,"elapsed":41543,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":961}},"cell_type":"code","source":["grid_lr.fit(X_train, Y_train)\n","grid_lr.score(X_train, Y_train)\n","\n","Y_pred = grid_lr.predict(X_test)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/model_selection/_split.py:2053: FutureWarning: You should specify a value for 'cv' instead of relying on the default value. The default value will change from 3 to 5 in version 0.22.\n","  warnings.warn(CV_WARNING, FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n","  FutureWarning)\n"],"name":"stderr"}]},{"metadata":{"id":"LeASuzY9pAXW","colab_type":"code","colab":{}},"cell_type":"code","source":["submission = pd.DataFrame({\n","        \"PassengerId\": test_df[\"PassengerId\"],\n","        \"Survived\": Y_pred\n","    })\n","submission.to_csv('titanic-lr2.csv', index=False)\n","\n","files.download('titanic-lr2.csv')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"gY_B0I2PpRnD","colab_type":"text"},"cell_type":"markdown","source":["---\n","\n","\n","**`Kaggle Score: 0.77511`**\n","\n","\n","---"]},{"metadata":{"id":"ICWahvwId6QS","colab_type":"text"},"cell_type":"markdown","source":["## Conclusion\n","\n","Overall, we see that all machine learning methods and manual classification have similar prediction power. Fine-tuning did not help in any of the machine learning methods, possibly due to having a small dataset and a few number of variables.\n","\n"]}]}