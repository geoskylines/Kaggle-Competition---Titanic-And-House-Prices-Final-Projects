{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Project Titanic - Phat Tran.ipynb","version":"0.3.2","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"9vif-by9f04P","colab_type":"text"},"cell_type":"markdown","source":["**Part 1 - Machine Learning Concepts**\n","\n","Questions\n","Describe the following concepts in the context of machine learning:\n","\n","* Supervised vs. unsupervised learning\n","* Model interpretability vs. accuracy\n","* Bias vs. variance\n","* Regression vs. classification\n","* Bootstraping vs. cross-validation\n","* Overfitting vs. underfitting"]},{"metadata":{"id":"kS72THHmgr52","colab_type":"text"},"cell_type":"markdown","source":["## Answers\n","Write your answers below.\n","\n","**Part I:\n","Questions\n","Describe the following concepts in the context of machine learning:**\n","\n","**Supervised vs. unsupervised learning**\n","\n","\tSupervised learning means that the user or programmer teaches the machine using data that are already labeled.  Supervised learning usually deals with two categories of algorithms such as Classification and Regression.  Classification within the data set are usually output variables.  Lets say a dataset consisting of different fruits and the classification would be considered the output categories such as “Green” or “Yellow” or “Fresh” or “Rotten”.  Regression in the dataset shows real value of outputs such as “dollars” or “size” or “weight”.  Supervised learning means that the user or programmer has to directly teach the machine to identify the dataset between inputs and outputs.  The machine itself cannot analysis the dataset without any guidance such as Unsupervised learning.\n","\tUnsupervised learning means that the user or programmer has to teach the machine with information that are not already classified or labeled in the dataset.  The machine learning from the programmer will therefore recognized the information without any guidance from the user or programmers in further process of analyzing the dataset.  Unsupervised learning typically involved categories such as Clustering and Association.  Clustering means that the dataset has certain grouping involved in the dataset such as grouping all “sales purchasing transactions together”.  Association means that the dataset has certain rules that connect these grouping together in the dataset.  The machine can identify these relationships in the dataset and analysis the data without any guidance.\n","\n","Work-Cited MLA Style\n","\n","* Soni,Devin. “Supervised vs. Unsupervised Learning – Towards Data Science.” Towards Data Science, Towards Data Science, 22 Mar. 2018, https://towardsdatascience.com/supervised-vs-unsupervised-learning-14f68e32ea8d\n","\n","* GeeksforGeeks. “Supervised and Unsupervised learning.” GeeksforGeeks, https://www.geeksforgeeks.org/supervised-unsupervised-learning/\n","\n","**Model interpretability vs. accuracy**\n","\n","\tInterpretability meaning how the accuracy is explained in the dataset toward the programmer or user.  The dataset might have Accuracy but without any good Model interpretability would give no value toward the user or programmer to understand the information within the dataset.  Dataset that have fewer parameters are better understand and interpretability.  A good example of Model interpretability would be a “Decision Tree”, which breaks down the structure of the dataset into parts.  This would make the user or programmer understand the information within the dataset better. \n","\tAccuracy meaning how the output from of the prediction are correct and have few errors.  Accuracy are usually predicted values in measurements in the outcome.  Accuracy doesn’t interpret the outcomes toward the users or programmers.  Accuracy just gives a straight forward measurement of how the algorithms runs and process the dataset.  A dataset that get bigger with more information would result in less interpretability.  As the dataset gets bigger with more information, this would result in more complexity of the Model.  Therefore, the dataset gets very difficult to interpret toward the user or programmer.\n","\n","Work-Cited MLA Style\n","\n","* Brownlee, Jason. “Model Prediction Accuracy Versus Interpretation in Machine Learning.” Machine Learning Mastery, 1 Aug. 2014, https://machinelearningmastery.com/model-prediction-versus-interpretation-in-machine-learning/\n","\n","**Bias vs. variance**\n","\n","\tBias are assumptions made toward the dataset model to keep the parametric between certain information in the dataset easier to understand and quicker to gather.  Two topics of bias would consist of “Low Bias” and “High Bias”.  “Low Bias” have less assumptions about information in the dataset and “High Bias” have larger assumptions about the information in the dataset.  “Low Bias” assumptions would consist of Decision Tress, k-Nearest Neighbors and Support Vector Machines.  “High Bias” assumptions would consist of Linear Regression, Linear Discriminant Analysis and Logistic Regression.\n","\tVariance are estimation of amount of a target function and how that target function would change in a predictable direction.  Variance in a dataset also shows the accurately of the output and dataset.  Variance consist of two categories such as “Low Variance” and “High Variance”.  “Low Variance” are small estimation of the target functions relatively dealing with the changes in the dataset.  “High Variance” are large estimation of the target functions that are relatively dealing with the direction of the dataset.  “Low Variance” examples would be Linear Regression, Linear Discriminant Analysis and Logistic Regression.  “High Variance” examples would be Decision Trees, k-nearest Neighbors and Support Vector Machines.\n","\tAn important concept between Bias and Variance would be that increasing the bias would create a decrease in the variance.  An increase in the variance would result in a decrease in the bias.  This is the relationship that are between Bias and Variances.  Bias and Variances play a key role in predicting the performance in the dataset and behavior of the machine learning algorithms.  Bias are assumptions that are simplified to make predictions on the dataset and Variance is the estimated amount that a target function would change in direction for the dataset.\n","\n","Work-Cited MLA Style\n","\n","* Brownlee, Jason. “Model Prediction Accuracy Versus Interpretation in Machine Learning.” Machine Learning Mastery, 1 Aug. 2014, https://machinelearningmastery.com/gentle-introduction-to-the-bias-variance-trade-off-in-machine-learning/\n","\n","**Regression vs. classification**\n","\n","\tClassification are labels or categories in a dataset that involve (X) and (Y) inputs and outputs.  Classification are used to quickly sort the datasets and make predicted outputs of values within the dataset.  Classifications predicts the discrete labels or categories within the dataset.  Classifications predictions are used to predict the accuracy of outputs and inputs within the dataset.  Regressions predictions are not able to complete these predictions in the dataset such as Classifications. A good used of classifications would be binary classification such as “Yes” or “No” outcome in a survey to customer’s if they like a product or not.  This binary classification makes it very easy and fast to process the dataset.\n","\tRegression are usually mapping functions within the dataset of (X) and (Y) inputs and outputs.  Regression usually involve real time value such as “dollar value” or “weight value”.  These values are usually integer or floating value points in the dataset.  Regression are used to predict quantity and estimations within the set.  Regressions have the ability to evaluate predictions of square roots mean squared errors and Classifications don’t have the ability to evaluate these functions.  Regression help evaluate the dataset and explain the impact of input and output within the dataset.\n","\n","Work-Cited MLA Style\n","\n","* Brownlee, Jason. “Difference Between Classiciation and Regression in Machine Learning.” Machine learning Mastery, 11 Dec. 2017, https://machinelearningmastery.com/classification-versus-regression-in-machine-learning/\n","\n","* Castle, Nikki. “Regression vs. Classification Algorithms. “ Oracle DataScience.com, 8 Mar. 2018, https://www.datascience.com/blog/regression-and-classification-machine-learning-algorithms\n","\n","**Bootstraping vs. cross-validation**\n","\n","\tBootstrapping are used to validate the prediction within the dataset and help make estimations that concern with the bias and variance of the dataset.  Bootstrapping would collect the chosen values within the dataset and these values could be tested for further predictions.  Bootstrapping are used for statistical validations without using existing formulas for the dataset.  Bootstrapping are used to analysis the datasets sample size in confidence interval such as within 95% confidence of the Variance.  Bootstrapping can estimate the median weight of uncertainty around the gather values of the dataset information.  If parametric of certain group of values of the data set are questionable.  Bootstrapping can test for these parametric errors.\n","\tCross Validation is done to validate the dataset’s model for performance and typically splits the dataset into numerous parts during the process.  The number of parts through Cross Validation are up to the user’s choice in processing the dataset.  If the user or programmer splits the Cross Validation into too many parts, this would increase the Variance and decrease the Bias.  If the Bias increases, therefore the Variance would decrease as a result.  The three steps in Cross Valuation method are “Reserve some portion of sample data-set”, “Using the rest data-set train the model”, and “test the model using the reserve portion of the dataset”.  Through these three methods are used to validate, analysis, or test values collected within the dataset.\n","\n","Work-Cited MLA Style\n","\n","* Aly, Mazen, “What is the difference between bootstrapping and cross validation?” Quora, 29th Sep. 2016, https://www.quora.com/What-is-the-difference-between-bootstrapping-and-cross-validation\n","\n","* Albright, Jeremy, “What is the Bootstrap?” Methods, 26th Feb. 2015, https://www.methodsconsultants.com/tutorial/what-is-the-bootstrap/\n","\n","* Sharma, Abhishek, “Cross Validation in Machine Learning”, GeeksforGeeks, https://www.geeksforgeeks.org/cross-validation-machine-learning/\n","\n","**Overfitting vs. underfitting**\n","\n","\tOverfitting means overloading too much data information into the dataset.  The model of the machine learning will start to learn inaccurate data entries inside the dataset.  This will result in the model to unable to categorized or organized any computations correctly for any testing of the dataset information.  Two main causes of overfitting would consist of non-parametric and non-linear methods.  These methods give more flexibility for users or programmers to build the model inside the dataset but causes Overfitting issues.\n","\tUnderfitting means that the model of the machine learning cannot be able to gather the information within the trend of the dataset.  Underfitting results in inaccuracy of the dataset.  The model might have too minimum of information inside the dataset to perform correctly to machine learning algorithms.  This would result in inaccuracy of predictions or testing of the dataset information.  This typically occurs when the user or programmer tries to build a linear model using non-linear datasets.  Underfitting can be prevented by simply adding more information toward the dataset.\n","\n","Work-Cited MLA Style\n","\n","* Nautiyal, Dewang, “Underfitting and Overfitting in Machine Learning” GeeksforGeeks, https://www.geeksforgeeks.org/underfitting-and-overfitting-in-machine-learning/\n","\n","\n"]},{"metadata":{"id":"JLKB-LjqR7FP","colab_type":"text"},"cell_type":"markdown","source":["**Part II: Project Titanic Competition**"]},{"metadata":{"id":"kHie59kAefg5","colab_type":"text"},"cell_type":"markdown","source":["* Loading the libraries & importing Dataframes\n","\n","* Getting train & test csv files as a DataFrame"]},{"metadata":{"id":"696CBcDp2htx","colab_type":"code","colab":{}},"cell_type":"code","source":["# load the necessary libraries\n","\n","#import numpy\n","import numpy as np\n","\n","# pandas\n","import pandas as pd\n","from pandas import Series,DataFrame\n","\n","# visualization\n","import seaborn as sns\n","sns.set() # setting seaborn default for plots\n","\n","# to download files from Colab to our computer\n","from google.colab import files\n","\n","# get train & test csv files as a DataFrame\n","train_df = pd.read_csv(\"https://s3.amazonaws.com/it4ba/R/train.csv\")\n","test_df    = pd.read_csv(\"https://s3.amazonaws.com/it4ba/R/test.csv\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"V1NsjdrifLuq","colab_type":"text"},"cell_type":"markdown","source":["Description of train_df rows & columns - Columns = PassengerId, Survived, Pclass, Name, Sex, Age, SibSp, Parch, Ticket, Fare, Cabin, & Embarked"]},{"metadata":{"id":"uPQdmzTRfGZc","colab_type":"code","outputId":"2cf23275-5ce0-4825-923c-2a86d433c93c","executionInfo":{"status":"ok","timestamp":1544750226618,"user_tz":300,"elapsed":510,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":197}},"cell_type":"code","source":["train_df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  "]},"metadata":{"tags":[]},"execution_count":218}]},{"metadata":{"id":"BwZ-6Rm5jHij","colab_type":"text"},"cell_type":"markdown","source":["Description of test_df rows & columns - Columns - PassengerID, Pclass, Name, Sex, Age, SibSp, Parch, Ticket, Fare, Cabin & Embarked"]},{"metadata":{"id":"I0nGDIG-iuZo","colab_type":"code","outputId":"4f329ff4-8fb7-4e6e-ce42-2859ba81141b","executionInfo":{"status":"ok","timestamp":1544750228092,"user_tz":300,"elapsed":326,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":197}},"cell_type":"code","source":["test_df.head()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>892</td>\n","      <td>3</td>\n","      <td>Kelly, Mr. James</td>\n","      <td>male</td>\n","      <td>34.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>330911</td>\n","      <td>7.8292</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>893</td>\n","      <td>3</td>\n","      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n","      <td>female</td>\n","      <td>47.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>363272</td>\n","      <td>7.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>894</td>\n","      <td>2</td>\n","      <td>Myles, Mr. Thomas Francis</td>\n","      <td>male</td>\n","      <td>62.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>240276</td>\n","      <td>9.6875</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>895</td>\n","      <td>3</td>\n","      <td>Wirz, Mr. Albert</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>315154</td>\n","      <td>8.6625</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>896</td>\n","      <td>3</td>\n","      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n","      <td>female</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3101298</td>\n","      <td>12.2875</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Pclass                                          Name     Sex  \\\n","0          892       3                              Kelly, Mr. James    male   \n","1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n","2          894       2                     Myles, Mr. Thomas Francis    male   \n","3          895       3                              Wirz, Mr. Albert    male   \n","4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n","\n","    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n","0  34.5      0      0   330911   7.8292   NaN        Q  \n","1  47.0      1      0   363272   7.0000   NaN        S  \n","2  62.0      0      0   240276   9.6875   NaN        Q  \n","3  27.0      0      0   315154   8.6625   NaN        S  \n","4  22.0      1      1  3101298  12.2875   NaN        S  "]},"metadata":{"tags":[]},"execution_count":219}]},{"metadata":{"id":"HPa8b4g6jsHe","colab_type":"text"},"cell_type":"markdown","source":["Description of how many rows and columns of entire train_df dataset - 891 passengers with 11 features"]},{"metadata":{"id":"-CZWrIpXjiD8","colab_type":"code","outputId":"97af0506-7361-4110-f673-b69d23794cd1","executionInfo":{"status":"ok","timestamp":1544750231717,"user_tz":300,"elapsed":340,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["train_df.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(891, 12)"]},"metadata":{"tags":[]},"execution_count":220}]},{"metadata":{"id":"bZpO8AHUkaDR","colab_type":"text"},"cell_type":"markdown","source":["Description of how many rows and columns of entire test_df dataset - 418 passengers with 11 features"]},{"metadata":{"id":"KZhKDM_ukLPK","colab_type":"code","outputId":"4e4d01e3-fee5-489f-8fb7-ded438e0ff28","executionInfo":{"status":"ok","timestamp":1544750232607,"user_tz":300,"elapsed":320,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["test_df.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(418, 11)"]},"metadata":{"tags":[]},"execution_count":221}]},{"metadata":{"id":"FALEtMmTfAjO","colab_type":"text"},"cell_type":"markdown","source":["Description of train_df - - Note: Age is 714 and Cabin 204.  This means there missing fields in the dataset"]},{"metadata":{"id":"rgc5H3fB3Qxm","colab_type":"code","outputId":"4656486a-8b2f-4791-bfab-62b412cdd986","executionInfo":{"status":"ok","timestamp":1544750233582,"user_tz":300,"elapsed":507,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":318}},"cell_type":"code","source":["train_df.info() "],"execution_count":0,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n","PassengerId    891 non-null int64\n","Survived       891 non-null int64\n","Pclass         891 non-null int64\n","Name           891 non-null object\n","Sex            891 non-null object\n","Age            714 non-null float64\n","SibSp          891 non-null int64\n","Parch          891 non-null int64\n","Ticket         891 non-null object\n","Fare           891 non-null float64\n","Cabin          204 non-null object\n","Embarked       889 non-null object\n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.6+ KB\n"],"name":"stdout"}]},{"metadata":{"id":"p-KN_nqFlSC1","colab_type":"text"},"cell_type":"markdown","source":["Description of test_df - Note: Age is 332 and Cabin is 91.  This means there missing fields in the dataset"]},{"metadata":{"id":"10kfyHJ8k7Es","colab_type":"code","outputId":"c1cb3171-8a02-4936-ea95-3263aedf1bbe","executionInfo":{"status":"ok","timestamp":1544750234950,"user_tz":300,"elapsed":324,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":301}},"cell_type":"code","source":["test_df.info() "],"execution_count":0,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 418 entries, 0 to 417\n","Data columns (total 11 columns):\n","PassengerId    418 non-null int64\n","Pclass         418 non-null int64\n","Name           418 non-null object\n","Sex            418 non-null object\n","Age            332 non-null float64\n","SibSp          418 non-null int64\n","Parch          418 non-null int64\n","Ticket         418 non-null object\n","Fare           417 non-null float64\n","Cabin          91 non-null object\n","Embarked       418 non-null object\n","dtypes: float64(2), int64(4), object(5)\n","memory usage: 36.0+ KB\n"],"name":"stdout"}]},{"metadata":{"id":"1aRm5XvmmcdT","colab_type":"text"},"cell_type":"markdown","source":["Checking for missing data values for train_df: Age = 177, Sex = 891, Cabin = 687, Embarked = 891 "]},{"metadata":{"id":"P9xAZKTRmSDz","colab_type":"code","outputId":"9488061c-1350-452d-b517-cd743092bc65","executionInfo":{"status":"ok","timestamp":1544750237428,"user_tz":300,"elapsed":509,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":247}},"cell_type":"code","source":["# Checking for missing values\n","train_df.isnull().sum()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age            177\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         2\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":224}]},{"metadata":{"id":"VpOmbvGEnfVd","colab_type":"text"},"cell_type":"markdown","source":["Checking for missing data values for test_df: Age = 86, Sex = 418, Cabin = 327, Embarked 418"]},{"metadata":{"id":"AACgkIghnMK1","colab_type":"code","outputId":"c03c1b46-f182-40c0-b735-e86ea5191a05","executionInfo":{"status":"ok","timestamp":1544750238681,"user_tz":300,"elapsed":365,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":230}},"cell_type":"code","source":["test_df.isnull().sum()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId      0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age             86\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             1\n","Cabin          327\n","Embarked         0\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":225}]},{"metadata":{"id":"NTfKNStjgMnD","colab_type":"text"},"cell_type":"markdown","source":["Description of the two missing data on 'Embarked'"]},{"metadata":{"id":"ceMZVsirgEBT","colab_type":"code","outputId":"2f574bd3-03c5-4082-bed0-db672b765216","executionInfo":{"status":"ok","timestamp":1544753804523,"user_tz":300,"elapsed":335,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":107}},"cell_type":"code","source":["train_df[train_df.Embarked.isnull()]"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>61</th>\n","      <td>62</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Icard, Miss. Amelie</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>113572</td>\n","      <td>80.0</td>\n","      <td>B28</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>829</th>\n","      <td>830</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Stone, Mrs. George Nelson (Martha Evelyn)</td>\n","      <td>female</td>\n","      <td>62.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>113572</td>\n","      <td>80.0</td>\n","      <td>B28</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     PassengerId  Survived  Pclass                                       Name  \\\n","61            62         1       1                        Icard, Miss. Amelie   \n","829          830         1       1  Stone, Mrs. George Nelson (Martha Evelyn)   \n","\n","        Sex   Age  SibSp  Parch  Ticket  Fare Cabin Embarked  \n","61   female  38.0      0      0  113572  80.0   B28      NaN  \n","829  female  62.0      0      0  113572  80.0   B28      NaN  "]},"metadata":{"tags":[]},"execution_count":261}]},{"metadata":{"id":"JrzllZrZo9K4","colab_type":"text"},"cell_type":"markdown","source":["Importing matplotib.pyplot as plt"]},{"metadata":{"id":"nFc56uGioFNs","colab_type":"code","colab":{}},"cell_type":"code","source":["#import matplotib.pyplot as plt\n","import matplotlib.pyplot as plt\n","%matplotlib inline"],"execution_count":0,"outputs":[]},{"metadata":{"id":"nM6A7dOCh6hU","colab_type":"text"},"cell_type":"markdown","source":["Filling the missing value for 'C' in 'Embarked'"]},{"metadata":{"id":"5j2qL8fhgkkn","colab_type":"code","colab":{}},"cell_type":"code","source":["#Filling in the value for the missing data on 'Embarked' in 'C'\n","train_df.Embarked.fillna(\"C\", inplace=True)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"PUuChx3fiABY","colab_type":"text"},"cell_type":"markdown","source":["Filling in the missing values for 'N' in 'Cabin'"]},{"metadata":{"id":"dVL16yaph1DR","colab_type":"code","colab":{}},"cell_type":"code","source":["# Assigning all the null values as \"N\"\n","train_df.Cabin.fillna(\"N\", inplace=True)\n","test_df.Cabin.fillna(\"N\", inplace=True)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"p1iEUKDtpTwE","colab_type":"text"},"cell_type":"markdown","source":["Defining bar chart for Catgories and Features"]},{"metadata":{"id":"dObaiU5spCD1","colab_type":"code","colab":{}},"cell_type":"code","source":["#defining bar chart for Catgories and Features - Survivers and Dead\n","def bar_chart(feature):\n","    survived = train_df[train_df['Survived']==1][feature].value_counts()\n","    dead = train_df[train_df['Survived']==0][feature].value_counts()\n","    df = pd.DataFrame([survived,dead])\n","    df.index = ['Survived','Dead']\n","    df.plot(kind='bar',stacked=True, figsize=(10,5))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"dlPqowBmiaaN","colab_type":"text"},"cell_type":"markdown","source":["Description of the null value on 'Fare' for the test_df dataset"]},{"metadata":{"id":"7DfaKHyniV3l","colab_type":"code","outputId":"8cc0d0d9-8c32-46f2-b601-e1f24691f7b4","executionInfo":{"status":"ok","timestamp":1544754401707,"user_tz":300,"elapsed":306,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":77}},"cell_type":"code","source":["test_df[test_df.Fare.isnull()]"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>152</th>\n","      <td>1044</td>\n","      <td>3</td>\n","      <td>Storey, Mr. Thomas</td>\n","      <td>male</td>\n","      <td>60.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3701</td>\n","      <td>NaN</td>\n","      <td>N</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     PassengerId  Pclass                Name   Sex   Age  SibSp  Parch Ticket  \\\n","152         1044       3  Storey, Mr. Thomas  male  60.5      0      0   3701   \n","\n","     Fare Cabin Embarked  \n","152   NaN     N        S  "]},"metadata":{"tags":[]},"execution_count":277}]},{"metadata":{"id":"uguyds6Rj51x","colab_type":"text"},"cell_type":"markdown","source":["Filling in the missing value for Fare"]},{"metadata":{"id":"Zg5J6WxYiznC","colab_type":"code","colab":{}},"cell_type":"code","source":["#Filling in the missing value for Fare\n","test_df.Fare.fillna('80', inplace=True)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"fRe6RwqEptsa","colab_type":"text"},"cell_type":"markdown","source":["Creating the bar chart to find the ratio of Female Vs. Male ratios of 'Survival' and 'Dead'- Note:  Female survived much more than Males"]},{"metadata":{"id":"JIwpEiBPpfGB","colab_type":"code","outputId":"af407c1b-b724-4668-ef82-cbc869c95ea8","executionInfo":{"status":"ok","timestamp":1544750243259,"user_tz":300,"elapsed":375,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":347}},"cell_type":"code","source":["#bar chart of Female Vs. Male ratios of 'Survival' and 'Dead'\n","bar_chart('Sex')"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<matplotlib.figure.Figure at 0x7fb88d8a7828>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"MZz-NeesrTqY","colab_type":"text"},"cell_type":"markdown","source":["Creating bar chart to find the ratio of which class survived the most and least:  \n","* Class 1 seemed to survived the most and Died the least.  '\n","* Class 3 Died the most and 2nd best to survived.  \n","* Class 3 survived the least and 2nd least to Died"]},{"metadata":{"id":"IHeneNsPqara","colab_type":"code","outputId":"f19b3b1a-5f86-4f76-c9c6-9576fb275880","executionInfo":{"status":"ok","timestamp":1544750245214,"user_tz":300,"elapsed":475,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":347}},"cell_type":"code","source":["#bar chart of Class 1,2 & 3. Ratios of 'Survival' and 'Dead'\n","bar_chart('Pclass')"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nSUVORK5CYII=\n","text/plain":["<matplotlib.figure.Figure at 0x7fb88d864da0>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"QzFhha5Wl0mE","colab_type":"text"},"cell_type":"markdown","source":["Description of train_df - Count, Mean, Std, Min, Max - Note: Only 38%(Mean) survived the sinking of the Titaniv"]},{"metadata":{"colab_type":"code","id":"BFu91yrulixf","outputId":"78c82d45-65ca-43b8-ef08-234ba2631aec","executionInfo":{"status":"ok","timestamp":1544755238868,"user_tz":300,"elapsed":354,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":287}},"cell_type":"code","source":["train.describe()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>714.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>29.699118</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>14.526497</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.420000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>20.125000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>28.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>38.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>80.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       PassengerId    Survived      Pclass         Age\n","count   891.000000  891.000000  891.000000  714.000000\n","mean    446.000000    0.383838    2.308642   29.699118\n","std     257.353842    0.486592    0.836071   14.526497\n","min       1.000000    0.000000    1.000000    0.420000\n","25%     223.500000    0.000000    2.000000   20.125000\n","50%     446.000000    0.000000    3.000000   28.000000\n","75%     668.500000    1.000000    3.000000   38.000000\n","max     891.000000    1.000000    3.000000   80.000000"]},"metadata":{"tags":[]},"execution_count":290}]},{"metadata":{"id":"tvL7hboemPwp","colab_type":"text"},"cell_type":"markdown","source":["Mean percentage of survival between Pclass - 1, 2 & 3 - Note: 63% percentage of 1st class survived and only 24% of 3rd class"]},{"metadata":{"id":"4F8uzlG5mHa2","colab_type":"code","outputId":"065cc2cf-ab2e-40b0-a847-f2e286e8bd14","executionInfo":{"status":"ok","timestamp":1544755385390,"user_tz":300,"elapsed":353,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":137}},"cell_type":"code","source":["train_df[['Pclass', 'Survived']].groupby(\"Pclass\").mean().reset_index()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0.629630</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0.472826</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0.242363</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Pclass  Survived\n","0       1  0.629630\n","1       2  0.472826\n","2       3  0.242363"]},"metadata":{"tags":[]},"execution_count":292}]},{"metadata":{"id":"0pbS2L43n1EO","colab_type":"text"},"cell_type":"markdown","source":["Finding the count of null values for Age"]},{"metadata":{"id":"tV3GQMLPoAwo","colab_type":"code","outputId":"2f62329e-d27f-4e7c-8d50-978f31a79aaf","executionInfo":{"status":"ok","timestamp":1544755883205,"user_tz":300,"elapsed":357,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}},"colab":{"base_uri":"https://localhost:8080/","height":70}},"cell_type":"code","source":["train_df.Age.isnull().value_counts()\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["False    714\n","True     177\n","Name: Age, dtype: int64"]},"metadata":{"tags":[]},"execution_count":294}]},{"metadata":{"id":"dZ156wxd5zo0","colab_type":"text"},"cell_type":"markdown","source":["**This is my 2nd to best Submission code:**"]},{"metadata":{"id":"EOnhc9tM6HGC","colab_type":"code","colab":{}},"cell_type":"code","source":["# set all passengers to did not survive\n","test_df['Survived']  = 0\n","\n","# set females to survived\n","test_df.loc[test_df['Sex'] == \"female\", \"Survived\"] = 1\n","\n","# set females in class 3 from embark S did not survive\n","filter = (test_df['Sex'] == \"female\") & (test_df['Embarked'] == \"S\") & (test_df['Pclass'] == 3)\n","test_df.loc[filter, \"Survived\"] = 0"],"execution_count":0,"outputs":[]},{"metadata":{"id":"WXHICjuZ6LaT","colab_type":"code","colab":{}},"cell_type":"code","source":["\n","# create the submission file using the test_df\n","submission = pd.DataFrame({\n","        \"PassengerId\": test_df[\"PassengerId\"],\n","        \"Survived\": test_df[\"Survived\"]\n","    })\n","\n","# convert the dataframe to csv file\n","submission.to_csv('titanic-mc2.csv', index=False)\n","\n","# download the submission file to our computer\n","files.download('titanic-mc2.csv')\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"efZMsB-u6hTk","colab_type":"text"},"cell_type":"markdown","source":["My 2nd best code gives a Kaggle Score: 0.77990"]},{"metadata":{"id":"Yhw0LxdPq74Q","colab_type":"text"},"cell_type":"markdown","source":["Machine Learning Methods"]},{"metadata":{"id":"E_Az7SOVrSjV","colab_type":"text"},"cell_type":"markdown","source":["Decision Trees"]},{"metadata":{"id":"jxIJcuKxrF-n","colab_type":"text"},"cell_type":"markdown","source":["Create our training and test sets with the variables"]},{"metadata":{"id":"s8fqsLVQq4OL","colab_type":"code","colab":{}},"cell_type":"code","source":["# string -> number for train_df\n","train_df['Sex'] = train_df['Sex'].map({'male': 0, 'female': 1})\n","train_df['Embarked'] = train_df['Embarked'].map({'S': 0, 'Q': 1, 'C': 2})\n","\n","# string -> number for test_df\n","test_df['Sex'] = test_df['Sex'].map({'male': 0, 'female': 1})\n","test_df['Embarked'] = test_df['Embarked'].map({'S': 0, 'Q': 1, 'C': 2})\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"kxdGP3fYq9jc","colab_type":"code","colab":{}},"cell_type":"code","source":["# define training and testing sets\n","X_train = train_df[[\"Sex\",\"Age\", \"Embarked\", \"Pclass\"]]\n","Y_train = train_df[\"Survived\"]\n","X_test  = test_df[[\"Sex\", \"Age\", \"Embarked\", \"Pclass\"]]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"KWxwR1jDAqxF","colab_type":"text"},"cell_type":"markdown","source":["Loading the neccessary libraries"]},{"metadata":{"id":"kKzUSEx1rPYa","colab_type":"code","colab":{}},"cell_type":"code","source":["# load decision tree method\n","from sklearn.tree import DecisionTreeClassifier"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Cp5PL4pErUwF","colab_type":"code","colab":{}},"cell_type":"code","source":["dt = DecisionTreeClassifier (random_state = 1)\n","# random_state is the seed for the random number generator. \n","# If we all have 1, then we all have the same results\n","# Important for replicability of the results\n","\n","# train and predict \n","dt.fit(X_train, Y_train)\n","Y_pred = dt.predict(X_test)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"X57aljgx55ka","colab_type":"text"},"cell_type":"markdown","source":["**Final Submission & Best result on kaggle competition:**"]},{"metadata":{"id":"8vdFCZtkrtVP","colab_type":"text"},"cell_type":"markdown","source":["Uploading the Submission file to laptop \n","* Note: There a problem with this part to upload the csv file  \n","* Last upload worked and gave me a Kaggle Score: 0.78468\n","* I relog in to work on my project another day and the code line 40 didn't work.\n","* I added codes line 41 that was taking from the original notebook sent to us from your email.  The code in line 41 works and somhow made the code to line 40 work too for uploading the prediction file to the computer."]},{"metadata":{"id":"LchEO4gy_WgJ","colab_type":"text"},"cell_type":"markdown","source":["The problem that I am having with this part of the code:\n","* Fitting the data\n","* dt.fit(X_train, Y_train)\n","\n","* Input contains Nan, infinity or a value too large for dtype('float32')\n","\n","* Missing data values in the dataset\n"]},{"metadata":{"id":"Q1Xj4-qZQdOV","colab_type":"text"},"cell_type":"markdown","source":["**Code Line 40**"]},{"metadata":{"id":"46wXnKY5NRUK","colab_type":"code","colab":{}},"cell_type":"code","source":["#Code Line 40\n","\n","submission = pd.DataFrame({\n","        \"PassengerId\": test_df[\"PassengerId\"],\n","        \"Survived\": Y_pred\n","    })\n","submission.to_csv('titanic-dt1 Decision Tree Best.csv', index=False)\n","\n","files.download('titanic-dt1 Decision Tree Best.csv')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"nm_fF4YRK6nf","colab_type":"text"},"cell_type":"markdown","source":["**I took a look at the original Notebook you gave to us to work on the code:**\n","* I found out that original notebook works & can upload prediction of Titanic-dt1.  Which was the one that I used for my Kaggle score: 0.78468\n","* I copy and past the codes from the orginal to this one part.  This section of the Notebook works and uploads the CSV file that was needed to run the submission for Kaggle competition.\n","\n","* The uploaded file CVS is the same one as above 'titanic-dt1', without any errors."]},{"metadata":{"id":"gPzHOBNOQjGj","colab_type":"text"},"cell_type":"markdown","source":["**Code Line 41**"]},{"metadata":{"id":"DMlHgvnRMRTM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":176},"outputId":"ce00a917-40bd-4438-f3ef-9c51d6962150","executionInfo":{"status":"ok","timestamp":1544834218579,"user_tz":300,"elapsed":1705,"user":{"displayName":"Phat T Tran","photoUrl":"","userId":"05526002729072716169"}}},"cell_type":"code","source":["#Code Line 41\n","\n","# load the necessary libraries\n","\n","# pandas\n","import pandas as pd\n","from pandas import Series,DataFrame\n","\n","# visualization\n","import seaborn as sns\n","\n","# to download files from Colab to our computer\n","from google.colab import files\n","\n","# get train & test csv files as a DataFrame\n","train_df = pd.read_csv(\"https://s3.amazonaws.com/it4ba/R/train.csv\")\n","test_df    = pd.read_csv(\"https://s3.amazonaws.com/it4ba/R/test.csv\")\n","\n","# Missing values in the Age variable\n","train_df['Age'].isna().sum()\n","\n","# impute age missing data with the mean age\n","train_df[\"Age\"] = train_df[\"Age\"].fillna(train_df[\"Age\"].mean())\n","\n","# checking if our mean imputation worked\n","train_df['Age'].isna().sum()\n","\n"," # impute age missing data with the mean age\n","test_df[\"Age\"] = test_df[\"Age\"].fillna(test_df[\"Age\"].mean())\n","\n","# checking if our mean imputation worked\n","test_df['Age'].isna().sum()\n","\n","# create Age2 categorical variable in the train dataset\n","train_df['Age2']  = 2\n","train_df['Age2'].loc[train_df['Age'] < 18] = 1\n","train_df['Age2'].loc[train_df['Age'] > 50] = 3\n","\n","# create Age2 categorical variable in the test dataset\n","test_df['Age2']  = 2\n","test_df['Age2'].loc[test_df['Age'] < 18] = 1\n","test_df['Age2'].loc[test_df['Age'] > 50] = 3\n","\n","pd.crosstab(train_df.Embarked, columns = \"Embark. Point\")\n","\n","# Checking for missing values\n","train_df['Embarked'].isna().sum()\n","\n","#train_df.groupby(by=\"Embarked\")\n","train_df[train_df.Pclass == 1].groupby(\"Embarked\").Fare.median()\n","\n","train_df[\"Embarked\"][pd.isnull(train_df.Embarked)] = \"C\"\n","\n","# string -> number for train_df\n","train_df['Sex'] = train_df['Sex'].map({'male': 0, 'female': 1})\n","train_df['Embarked'] = train_df['Embarked'].map({'S': 0, 'Q': 1, 'C': 2})\n","\n","# string -> number for test_df\n","test_df['Sex'] = test_df['Sex'].map({'male': 0, 'female': 1})\n","test_df['Embarked'] = test_df['Embarked'].map({'S': 0, 'Q': 1, 'C': 2})\n","\n","# define training and testing sets\n","X_train = train_df[[\"Sex\",\"Age2\", \"Embarked\", \"Pclass\"]]\n","Y_train = train_df[\"Survived\"]\n","X_test  = test_df[[\"Sex\", \"Age2\", \"Embarked\", \"Pclass\"]]\n","\n","# load decision tree method\n","from sklearn.tree import DecisionTreeClassifier\n","\n","dt = DecisionTreeClassifier (random_state = 1)\n","# random_state is the seed for the random number generator. \n","# If we all have 1, then we all have the same results\n","# Important for replicability of the results\n","\n","# train and predict \n","dt.fit(X_train, Y_train)\n","Y_pred = dt.predict(X_test)\n","          \n","submission = pd.DataFrame({\n","        \"PassengerId\": test_df[\"PassengerId\"],\n","        \"Survived\": Y_pred\n","    })\n","submission.to_csv('titanic-dt1.csv', index=False)\n","\n","files.download('titanic-dt1.csv')"],"execution_count":43,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:194: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n","  self._setitem_with_indexer(indexer, value)\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:47: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"],"name":"stderr"}]}]}